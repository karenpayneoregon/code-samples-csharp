{
    "Ratings": [],
    "Progress": {
        "completedLearningItems": [
            {
                "title": "learn.persist-data-ef-core.1-introduction",
                "type": "unit",
                "completedAt": "2019-06-28T20:24:24.2900914Z"
            },
            {
                "title": "learn.persist-data-ef-core.2-setup-environment",
                "type": "unit",
                "completedAt": "2019-06-28T20:24:24.4009718Z"
            },
            {
                "title": "learn.persist-data-ef-core.4-design-domain-model",
                "type": "unit",
                "completedAt": "2020-07-30T17:31:32.9471277Z"
            },
            {
                "title": "learn.persist-data-ef-core.5-write-crud-queries",
                "type": "unit",
                "completedAt": "2020-07-30T17:31:33.122248Z"
            }
        ]
    },
    "NextSteps": null,
    "Lists": [
        {
            "id": "bookmarks",
            "userId": "81a52ab4-4001-0003-0000-000000000000",
            "name": "Bookmarks",
            "description": "",
            "type": "bookmarks",
            "lastModified": "2020-12-03T23:05:39+00:00",
            "items": [],
            "isOfficial": false,
            "challengeId": null
        }
    ],
    "TechProfile": {
        "email": "paynek123@someHost.net",
        "locale": "en-us",
        "country": "US",
        "contactPointTopicSetting": "OptInImplicit",
        "gsi": false,
        "isAvatarTakenDown": null,
        "source": null,
        "acceptedPrivacyNotice": null,
        "authenticationModes": [
            {
                "id": "0003400181A52AB4",
                "type": "MSA",
                "tenantId": "9188040d-6c67-4c5b-b112-36a304b66dad",
                "upn": "paynek123@someHost.net",
                "dateAcceptedPrivacyNotice": null,
                "dateAdded": "2019-07-22T21:44:36.3307357+00:00"
            }
        ],
        "interests": null,
        "userId": "81a52ab4-4001-0003-0000-000000000000",
        "userName": "karenpayne",
        "displayName": "Karen Payne",
        "avatarUrl": "https://techprofile.blob.core.windows.net/images/7ca689de67ca4855a0ed985ff5add70e.png",
        "avatarThumbnailUrl": "https://techprofile.blob.core.windows.net/thumbnails/thumb_7ca689de67ca4855a0ed985ff5add70e.png",
        "isPrivate": false,
        "isMicrosoftUser": false,
        "isMvp": true,
        "qnaUserId": "53807",
        "followerCount": 1,
        "followingCount": 1,
        "answersAccepted": 9,
        "reputationPoints": 766,
        "createdOn": "2018-12-04T08:00:00+00:00"
    },
    "XP": {
        "totalPoints": 400,
        "level": {
            "levelNumber": 1,
            "pointsLow": 0,
            "pointsHigh": 1799
        },
        "levelAchievedDateUTC": "2019-06-28T20:24:24.4272727Z",
        "nextLevelNumber": 1,
        "currentLevelPointsEarned": 400,
        "pointsToNextLevel": 1400,
        "achievements": []
    },
    "Challenges": null,
    "Q&A": [
        {
            "actionType": "answered",
            "actionDate": "2020-12-14T22:26:46.047",
            "node": {
                "id": 198224,
                "title": null,
                "body": "<p>Hello,</p>\n<p>Try the following SomeDataGridView.ExportRows(&#34;TODO file name&#34;)</p>\n<pre><code> Imports System.IO\n Public Module DataGridViewExtensions\n     &lt;Runtime.CompilerServices.Extension&gt; _\n     Public Sub ExportRows( sender As DataGridView,  pFileName As String, Optional  defaultNullValue As String = &#34;(empty)&#34;)\n         File.WriteAllLines(pFileName,(sender.Rows.Cast(Of DataGridViewRow)().\n                               Where(Function(row) Not row.IsNewRow).Select(Function(row) New With {\n                               Key row,\n                               Key .rowItem = String.Join(&#34;,&#34;, Array.ConvertAll(row.Cells.Cast(Of DataGridViewCell)().ToArray(), \n                                                                                Function(c) (If(c.Value Is Nothing, defaultNullValue, c.Value.ToString()))))\n                                                                              }).Select(Function(row) row.rowItem)))\n     End Sub\n End Module\n</code></pre>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-14T20:24:30.407",
            "node": {
                "id": 198111,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4782421\" href=\"/answers/users/4782421/hobbyistprogrammer-7674.html\">@Hobbyistprogrammer-7674</a> </p>\n<p>Conceptually speaking when working with a control such as a ComboBox or ListBox and need to reflect changes to a property using INotifyPropertyChanged and a BindingList will be your foundation.</p>\n<h4>Class</h4>\n<br /><pre><code> Imports System.ComponentModel\n Imports System.Runtime.CompilerServices\n    \n Public Class Box\n     Implements INotifyPropertyChanged\n    \n     Private _length As Double\n     Private _width As Double\n     Private _height As Double\n    \n     Public Property Length As Double\n         Get\n             Return _length\n         End Get\n         Set\n             _length = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Width As Double\n         Get\n             Return _width\n         End Get\n         Set\n             _width = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Height As Double\n         Get\n             Return _height\n         End Get\n         Set\n             _height = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public ReadOnly Property Volume As Double\n     get\n         Return Length * Width * Height\n     End Get\n     End Property\n     Public ReadOnly Property Area As Double\n     Public ReadOnly Property Other As Double\n    \n     Public Overrides Function ToString() As String\n         Return $&#34;{Volume}&#34;\n     End Function\n    \n     Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\n     Protected Overridable Sub OnPropertyChanged(&lt;CallerMemberName&gt; Optional ByVal propertyName As String = Nothing)\n         PropertyChangedEvent?.Invoke(Me, New PropertyChangedEventArgs(propertyName))\n     End Sub\n    \n End Class\n</code></pre>\n<br /><h4>Form code</h4>\n<br /><pre><code> Imports System.ComponentModel\n    \n Public Class Form1\n    \n     Private ReadOnly _boxList As New List(Of Box) From {\n         New Box() With {.Width = 10, .Height = 20, .Length = 4},\n         New Box() With {.Width = 20, .Height = 40, .Length = 14},\n         New Box() With {.Width = 30, .Height = 60, .Length = 22}}\n    \n     Private _boxBindingList As BindingList(Of Box)\n     Private ReadOnly _boxBindingSouce As New BindingSource\n    \n     Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n    \n         _boxBindingList = New BindingList(Of Box)(_boxList)\n         _boxBindingSouce.DataSource = _boxBindingList\n         ComboBox1.DataSource = _boxBindingSouce\n    \n         LengthTextBox.DataBindings.Add(\n             &#34;Text&#34;,\n             _boxBindingSouce,\n             &#34;Length&#34;)\n    \n     End Sub\n    \n End Class\n</code></pre>\n<br /><h4>Screenshot</h4>\n<p>Change the value in the TextBox and the current item in the ComboBox is updated. This can also be done in code by casting </p>\n<pre><code> _boxBindingList(_boxBindingSouce.Position).Length = 11\n</code></pre>\n<br /><p><img src=\"/answers/storage/attachments/48091-a1.png\" alt=\"48091-a1.png\" /></p>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-14T19:52:54.863",
            "node": {
                "id": 198013,
                "title": null,
                "body": "<p>Hello  <a rel=\"user\" nodeId=\"5027890\" href=\"/answers/users/5027890/elfenliedtopfan5-3426.html\">@elfenliedtopfan5-3426</a> </p>\n<h4>Basic pattern to follow</h4>\n<br /><pre><code> listBox1.Invoke(new Action(() =&gt; listBox1.Items.Add(someItem)));\n</code></pre>\n<br /><h4>Generic extension method</h4>\n<br /><pre><code> public static class Extensions\n {\n     public static void InvokeIfRequired&lt;T&gt;(this T control, Action&lt;T&gt; action) where T : ISynchronizeInvoke\n     {\n         if (control.InvokeRequired)\n         {\n             control.Invoke(new Action(() =&gt; action(control)), null);\n         }\n         else\n         {\n             action(control);\n         }\n     }\n }\n</code></pre>\n<br /><h4>Usage</h4>\n<br /><pre><code> listBox1.InvokeIfRequired(listBox =&gt; {listBox.Items.Add(someItem);});\n</code></pre>\n<br /><br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-14T13:06:44.74",
            "node": {
                "id": 197641,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"857822\" href=\"/answers/users/857822/amrali4235.html\">@AmrAli4235</a> </p>\n<p>If the following is not what you care for then please provide more details.</p>\n<p>In regards to using XML, yes this is possible so long as you can write code in the application that can follow settings in the XML but another idea is to use a Json file instead as using Json when setup to read everything is strongly typed while XML is not.</p>\n<p>I have an example which controls unseen operations, in this case to log information to a log file. Below Helper class reads information from a Json file using Json.Net library into an instance of a class then in code we can ask for UsingLogging.</p>\n<h4>JSON</h4>\n<br /><pre><code> {\n   &#34;GeneralSettings&#34;: {\n     &#34;LogExceptions&#34;: false,\n     &#34;DatabaseSettings&#34;: {\n       &#34;DatabaseServer&#34;: &#34;.\\\\SQLEXPRESS&#34;,\n       &#34;Catalog&#34;: &#34;NorthWind2020&#34;,\n       &#34;IntegratedSecurity&#34;: true,\n       &#34;UsingLogging&#34;: true\n     },\n     &#34;EmailSettings&#34;: {\n       &#34;Host&#34;: &#34;smtp.gmail.com&#34;,\n       &#34;Port&#34;: 587,\n       &#34;EnableSsl&#34;: true,\n       &#34;DefaultCredentials&#34;: false,\n       &#34;PickupDirectoryLocation&#34;: &#34;MailDrop&#34;\n     }\n   }\n }\n</code></pre>\n<br /><h4>Code</h4>\n<br /><pre><code> Protected Overrides Sub OnConfiguring(ByVal optionsBuilder As DbContextOptionsBuilder)\n     If Not optionsBuilder.IsConfigured Then\n    \n         If Helper.UseLogging() Then\n             optionsBuilder.UseSqlServer(Helper.ConnectionString()).EnableSensitiveDataLogging().EnableDetailedErrors().LogTo(_logStream.WriteLine)\n         Else\n             optionsBuilder.UseSqlServer(Helper.ConnectionString())\n         End If\n    \n     End If\n End Sub\n</code></pre>\n<br /> <ul>\n  <li><p> Classes to store information are <a href=\"https://github.com/karenpayneoregon/EntityFrameworkCore_VisualBasic/tree/master/ConfigurationHelper/Classes\">found here</a> in my GitHub repository.<br /></p>\n\n  </li>\n  <li><p> The <a href=\"https://github.com/karenpayneoregon/EntityFrameworkCore_VisualBasic/blob/master/ConfigurationHelper/Helper.vb\">following class</a> (also in the same repository) provides code to read the json file above with a small example to write back to the json file.<br /></p>\n\n  </li>\n  <li><p> Since the class in the last bullet uses shared methods it&#39;s easy to obtain information any place in your code to respond to and get changes in code logic where the settings may change in a admin form.<br /></p>\n\n  </li>\n  <li><p> The Admin form reads and changes settings<br /></p>\n\n  </li>\n  <li><p> No matter if there are changes or just reading, at application startup you can read settings into a singleton class or a code module and other parts of the code can use what was read at startup.</p>\n\n  </li>\n\n </ul>\n<h4>Control changes</h4>\n<br /><p>The following is from the second bullet above which indicates how to read and respond to if changes are made at runtime to the underlying json file.<br /><img src=\"/answers/storage/attachments/47965-a1.png\" alt=\"47965-a1.png\" /></p>\n<p>Below shows a class project (<a href=\"https://github.com/karenpayneoregon/EntityFrameworkCore_VisualBasic/tree/master/ConfigurationHelper/Classes\">found here</a>) which is portable to any project for reading json </p>\n<p><img src=\"/answers/storage/attachments/47982-a1a.png\" alt=\"47982-a1a.png\" /></p>\n<p>The following is an example (has no ties to the code above other than it uses the exact same logic mention above) where the top form is accessed from the &#34;Misc&#34; menu, user makes changes and then when actions are performed they use setting from the json file.</p>\n<p><img src=\"/answers/storage/attachments/47919-a2.png\" alt=\"47919-a2.png\" /></p>\n<h3>Redirecting assembly versions</h3>\n<p>Even though the following may not suit your needs it is at least worth knowing about which does need a update installation is working with versions of a DLL which <a href=\"https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-1.1/7wd6ex19(v=vs.71)?redirectedfrom=MSDN\">explained here</a>. </p>\n<p>Part of the solution is to update the .config file .e.g.</p>\n<pre><code> &lt;configuration&gt;\n    &lt;runtime&gt;\n       &lt;assemblyBinding xmlns=&#34;urn:schemas-microsoft-com:asm.v1&#34;&gt;\n        &lt;dependentAssembly&gt;\n          &lt;assemblyIdentity name=&#34;myAssembly&#34;\n                            publicKeyToken=&#34;32ab4ba45e0a69a1&#34;\n                            culture=&#34;en-us&#34; /&gt;\n          &lt;bindingRedirect oldVersion=&#34;1.0.0.0&#34;\n                           newVersion=&#34;2.0.0.0&#34;/&gt;\n        &lt;/dependentAssembly&gt;\n       &lt;/assemblyBinding&gt;\n    &lt;/runtime&gt;\n &lt;/configuration&gt;\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "published",
            "actionDate": "2020-12-14T03:36:23.097",
            "node": {
                "id": 196686,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a></p>\n<p>I&#39;ve edited this post as there were issues. In this revised version the DataGridView columns are created in the designer, DataPropertyName set for each column.</p>\n<h4>Screenshot</h4>\n<p><img src=\"/answers/storage/attachments/47812-b1.png\" alt=\"47812-b1.png\" /></p>\n <ul>\n  <li><p> A BindingSource is the data source using a DataTable for both the DataGridView and the TextBox<br /></p>\n\n  </li>\n  <li><p> Note how data binding is done for the TextBox using the Binding class which permits formatting in an event.<br /></p>\n\n  </li>\n  <li><p> The following <strong>Value1Column.DefaultCellStyle.Format = &#34;###.##\\ Euro&#34;</strong> does the DataGridView formatting<br /></p>\n\n  </li>\n  <li><p> EditingControlShowing removed <strong>Euro</strong> but on exit places Euro back in</p>\n\n  </li>\n\n </ul>\n<h4>Full source</h4>\n<br /><pre><code> Public Class Form1\n     Private ReadOnly _bindingSource As New BindingSource\n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n    \n         Dim dt As New DataTable\n    \n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Value1&#34;, .DataType = GetType(Decimal)})\n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Value2&#34;, .DataType = GetType(Decimal)})\n    \n         dt.Rows.Add(New Object() {12.99D, 12.99D})\n         dt.Rows.Add(New Object() {1112D, 1112D})\n         dt.Rows.Add(New Object() {99.87D, 99.87D})\n    \n         _bindingSource.DataSource = dt\n    \n         Dim b As New Binding(&#34;Text&#34;, _bindingSource, &#34;Value1&#34;) With {\n             .DataSourceUpdateMode = DataSourceUpdateMode.OnPropertyChanged\n         }\n    \n         AddHandler b.Format, AddressOf FormatValue1\n    \n         Value1TextBox.DataBindings.Add(b)\n    \n         Value1Column.DefaultCellStyle.Format = &#34;###.##\\ Euro&#34;\n         DataGridView1.DataSource = _bindingSource\n    \n     End Sub\n    \n     Private Sub FormatValue1(sender As Object, e As ConvertEventArgs)\n         Dim value As Decimal = 0\n         If Decimal.TryParse(e.Value.ToString(), value) Then\n             e.Value = $&#34;{e.Value} Euro&#34;\n         End If\n     End Sub\n     Private Sub DataGridView1_EditingControlShowing(\n         sender As Object, e As DataGridViewEditingControlShowingEventArgs) _\n         Handles DataGridView1.EditingControlShowing\n    \n         If DataGridView1.CurrentCell.ColumnIndex = 0 Then\n             e.CellStyle.Format = &#34;N2&#34;\n             e.Control.Text = DataGridView1.CurrentCell.Value.ToString()\n         End If\n    \n     End Sub\n End Class\n</code></pre>\n<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-14T03:33:00.337",
            "node": {
                "id": 196686,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a></p>\n<p>I&#39;ve edited this post as there were issues. In this revised version the DataGridView columns are created in the designer, DataPropertyName set for each column.</p>\n<h4>Screenshot</h4>\n<p><img src=\"/answers/storage/attachments/47812-b1.png\" alt=\"47812-b1.png\" /></p>\n <ul>\n  <li><p> A BindingSource is the data source using a DataTable for both the DataGridView and the TextBox<br /></p>\n\n  </li>\n  <li><p> Note how data binding is done for the TextBox using the Binding class which permits formatting in an event.<br /></p>\n\n  </li>\n  <li><p> The following <strong>Value1Column.DefaultCellStyle.Format = &#34;###.##\\ Euro&#34;</strong> does the DataGridView formatting<br /></p>\n\n  </li>\n  <li><p> EditingControlShowing removed <strong>Euro</strong> but on exit places Euro back in</p>\n\n  </li>\n\n </ul>\n<h4>Full source</h4>\n<br /><pre><code> Public Class Form1\n     Private ReadOnly _bindingSource As New BindingSource\n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n    \n         Dim dt As New DataTable\n    \n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Value1&#34;, .DataType = GetType(Decimal)})\n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Value2&#34;, .DataType = GetType(Decimal)})\n    \n         dt.Rows.Add(New Object() {12.99D, 12.99D})\n         dt.Rows.Add(New Object() {1112D, 1112D})\n         dt.Rows.Add(New Object() {99.87D, 99.87D})\n    \n         _bindingSource.DataSource = dt\n    \n         Dim b As New Binding(&#34;Text&#34;, _bindingSource, &#34;Value1&#34;) With {\n             .DataSourceUpdateMode = DataSourceUpdateMode.OnPropertyChanged\n         }\n    \n         AddHandler b.Format, AddressOf FormatValue1\n    \n         Value1TextBox.DataBindings.Add(b)\n    \n         Value1Column.DefaultCellStyle.Format = &#34;###.##\\ Euro&#34;\n         DataGridView1.DataSource = _bindingSource\n    \n     End Sub\n    \n     Private Sub FormatValue1(sender As Object, e As ConvertEventArgs)\n         Dim value As Decimal = 0\n         If Decimal.TryParse(e.Value.ToString(), value) Then\n             e.Value = $&#34;{e.Value} Euro&#34;\n         End If\n     End Sub\n     Private Sub DataGridView1_EditingControlShowing(\n         sender As Object, e As DataGridViewEditingControlShowingEventArgs) _\n         Handles DataGridView1.EditingControlShowing\n    \n         If DataGridView1.CurrentCell.ColumnIndex = 0 Then\n             e.CellStyle.Format = &#34;N2&#34;\n             e.Control.Text = DataGridView1.CurrentCell.Value.ToString()\n         End If\n    \n     End Sub\n End Class\n</code></pre>\n<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-14T01:17:00.4",
            "node": {
                "id": 196686,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a></p>\n<p>I&#39;ve edited this post as there were issues. In this revised version the DataGridView columns are created in the designer, DataPropertyName set for each column.</p>\n<h4>Screenshot</h4>\n<p><img src=\"/answers/storage/attachments/47812-b1.png\" alt=\"47812-b1.png\" /></p>\n <ul>\n  <li><p> A BindingSource is the data source using a DataTable for both the DataGridView and the TextBox<br /></p>\n\n  </li>\n  <li><p> Note how data binding is done for the TextBox using the Binding class which permits formatting in an event.<br /></p>\n\n  </li>\n  <li><p> The following <strong>Value1Column.DefaultCellStyle.Format = &#34;###.##\\ Euro&#34;</strong> does the DataGridView formatting<br /></p>\n\n  </li>\n  <li><p> EditingControlShowing removed <strong>Euro</strong> but on exit places Euro back in</p>\n\n  </li>\n\n </ul>\n<h4>Full source</h4>\n<br /><pre><code> Public Class Form1\n     Private ReadOnly _bindingSource As New BindingSource\n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n    \n         Dim dt As New DataTable\n    \n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Value1&#34;, .DataType = GetType(Decimal)})\n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Value2&#34;, .DataType = GetType(Decimal)})\n    \n         dt.Rows.Add(New Object() {12.99D, 12.99D})\n         dt.Rows.Add(New Object() {1112D, 1112D})\n         dt.Rows.Add(New Object() {99.87D, 99.87D})\n    \n         _bindingSource.DataSource = dt\n    \n         Dim b As New Binding(&#34;Text&#34;, _bindingSource, &#34;Value1&#34;) With {\n             .DataSourceUpdateMode = DataSourceUpdateMode.OnPropertyChanged\n         }\n    \n         AddHandler b.Format, AddressOf FormatValue1\n    \n         Value1TextBox.DataBindings.Add(b)\n    \n         Value1Column.DefaultCellStyle.Format = &#34;###.##\\ Euro&#34;\n         DataGridView1.DataSource = _bindingSource\n    \n     End Sub\n    \n     Private Sub FormatValue1(sender As Object, e As ConvertEventArgs)\n         Dim value As Decimal = 0\n         If Decimal.TryParse(e.Value.ToString(), value) Then\n             e.Value = $&#34;{e.Value} Euro&#34;\n         End If\n     End Sub\n     Private Sub DataGridView1_EditingControlShowing(\n         sender As Object, e As DataGridViewEditingControlShowingEventArgs) _\n         Handles DataGridView1.EditingControlShowing\n    \n         If DataGridView1.CurrentCell.ColumnIndex = 0 Then\n             e.CellStyle.Format = &#34;N2&#34;\n             e.Control.Text = DataGridView1.CurrentCell.Value.ToString()\n         End If\n    \n     End Sub\n End Class\n</code></pre>\n<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-13T23:19:38.703",
            "node": {
                "id": 196676,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4945286\" href=\"/answers/users/4945286/rene-4203.html\">@Rene-4203</a> </p>\n<p>One thing you can do to better understand is to read the documentation on <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.dbcontext.savechanges?view=efcore-5.0\">SaveChanges/SaveChangesAsync</a> and <a href=\"https://docs.microsoft.com/en-us/ef/core/querying/tracking\">track changes</a> along with implementing logging as shown in <a href=\"https://github.com/karenpayneoregon/efcore5-getting-started/blob/master/EntityFramework5North/Contexts/NorthwindContext.cs#L58\">this DbContext</a>.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-13T22:57:19",
            "node": {
                "id": 196659,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"5012782\" href=\"/answers/users/5012782/soyounglee-7493.html\">@SoyoungLee-7493</a> </p>\n<p>Looks like you can use the builder pattern which is a creational design pattern and can be used to create complex objects step by step as seen in the following Microsoft <a href=\"https://social.technet.microsoft.com/wiki/contents/articles/52583.vb-net-fluent-builder-design-pattern.aspx\">TechNet article code sample</a> which has several more examples to get ideas from.</p>\n<h3>Simple example</h3>\n<br /><h4>Base class</h4>\n<br /><pre><code> Public Class Burger\n     Public ReadOnly Property Size() As Integer\n     Public ReadOnly Property Cheese() As Boolean\n     Public ReadOnly Property Pepperoni() As Boolean\n     Public ReadOnly Property Lettuce() As Boolean\n     Public ReadOnly Property Tomato() As Boolean\n    \n     Public Sub New(builder As Classes.BurgerBuilder)\n         Size = builder.Size\n         Cheese = builder.Cheese\n         Pepperoni = builder.Pepperoni\n         Lettuce = builder.Lettuce\n         Tomato = builder.Tomato\n     End Sub\n End Class\n</code></pre>\n<br /><br /><h4>Builder class</h4>\n<br /><pre><code> Public Class BurgerBuilder\n     Public ReadOnly Property Size() As Integer\n    \n     Private mCheese As Boolean\n     Public Property Cheese() As Boolean\n         Get\n             Return mCheese\n         End Get\n         Private Set(ByVal value As Boolean)\n             mCheese = value\n         End Set\n     End Property\n     Private mPepperoni As Boolean\n     Public Property Pepperoni() As Boolean\n         Get\n             Return mPepperoni\n         End Get\n         Private Set(ByVal value As Boolean)\n             mPepperoni = value\n         End Set\n     End Property\n     Private mLettuce As Boolean\n     Public Property Lettuce() As Boolean\n         Get\n             Return mLettuce\n         End Get\n         Private Set(ByVal value As Boolean)\n             mLettuce = value\n         End Set\n     End Property\n     Private mTomato As Boolean\n     Public Property Tomato() As Boolean\n         Get\n             Return mTomato\n         End Get\n         Private Set(ByVal value As Boolean)\n             mTomato = value\n         End Set\n     End Property\n    \n     Public Sub New(ByVal size As Integer)\n         Me.Size = size\n     End Sub\n    \n     Public Function AddPepperoni() As BurgerBuilder\n         Pepperoni = True\n         Return Me\n     End Function\n    \n     Public Function AddLettuce() As BurgerBuilder\n         Lettuce = True\n         Return Me\n     End Function\n    \n     Public Function AddCheese() As BurgerBuilder\n         Cheese = True\n         Return Me\n     End Function\n    \n     Public Function AddTomato() As BurgerBuilder\n         Tomato = True\n         Return Me\n     End Function\n    \n     Public Function Build() As Burger\n         Return New Burger(Me)\n     End Function\n End Class\n</code></pre>\n<br /><h4>Usage</h4>\n<br /><pre><code> Dim burger = New Classes.BurgerBuilder(14).\n         AddPepperoni().\n         AddLettuce().\n         AddTomato().\n         Build()\n</code></pre>\n<br /><p>In the above we can also specify the type</p>\n<pre><code> Dim burger As Burger = New Classes.BurgerBuilder(14).\n         AddPepperoni().\n         AddLettuce().\n         AddTomato().\n         Build()\n</code></pre>\n<br /><h4>Results</h4>\n<p><img src=\"/answers/storage/attachments/47645-a1.png\" alt=\"47645-a1.png\" /></p>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-13T18:53:50.093",
            "node": {
                "id": 196593,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"5012416\" href=\"/answers/users/5012416/morsormaya-0953.html\">@MorsorMaya-0953</a> </p>\n<p>If the question &#34;how to format code&#34; means using a shortcut key in Visual Studio to format code shown you can find the shortcut under Visual Studio options, keyboard. Note that the default shortcut is different dependent on the schema used as per the second screenshot</p>\n<h3>If this is not what you mean please explain.</h3>\n<br /><p><img src=\"/answers/storage/attachments/47711-a1.png\" alt=\"47711-a1.png\" /></p>\n<br /><p><img src=\"/answers/storage/attachments/47721-a1a.png\" alt=\"47721-a1a.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-13T18:44:31.987",
            "node": {
                "id": 196449,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4942644\" href=\"/answers/users/4942644/brandonstewart-4522.html\">@BrandonStewart-4522</a> in regards to configuration files, although documentation is rather limited, appsettings.json is the standard as shown in <a href=\"https://github.com/karenpayneoregon/EntityFrameworkCore_VisualBasic/tree/master/ConfigurationHelperSamples\">the following code sample</a> I created.</p>\n<br /><br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-13T01:00:57.85",
            "node": {
                "id": 196264,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4978993\" href=\"/answers/users/4978993/williamsonstephen-8510.html\">@WilliamsonStephen-8510</a> </p>\n<p>Here is an example using EF Core 5 inserting a new record into a table and returning the new primary key. Full source in the following <a href=\"https://github.com/karenpayneoregon/efcore5-getting-started/tree/master/StoredProcedureInsertNewCategory\">GitHub repository</a>.</p>\n<h3>Table definition</h3>\n<p><img src=\"/answers/storage/attachments/47605-a1.png\" alt=\"47605-a1.png\" /></p>\n<br /><h3>Stored procedure</h3>\n<br /><p>Insert stored procedure in SQL-Server database containing the table above.</p>\n<pre><code> CREATE PROCEDURE [dbo].[uspInsertCategory]  \n     @CategoryName NVARCHAR(15), \n     @Description ntext, \n     @Identity INT OUT \n AS \n BEGIN \n     -- SET NOCOUNT ON added to prevent extra result sets from \n     -- interfering with SELECT statements. \n     SET NOCOUNT ON; \n INSERT INTO dbo.Categories (CategoryName, Description) VALUES (@CategoryName, @Description);\n SET @Identity = SCOPE_IDENTITY() \n     \n END \n</code></pre>\n<br /><h3>Code</h3>\n<br /><p>Code to insert a new record. Pay attention to the second parameter which after the command is finished if successful contains the new primary key where the parameter is setup as Output directions.</p>\n<br /><pre><code> using System;\n using System.Collections.Generic;\n using System.Data;\n using System.Diagnostics;\n using System.Text;\n using Microsoft.Data.SqlClient;\n using Microsoft.EntityFrameworkCore;\n using StoredProcedureInsertNewCategory.Context;\n    \n namespace StoredProcedureInsertNewCategory.Classes\n {\n     public class Operations\n     {\n         /// &lt;summary&gt;\n         /// Insert new category\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;categoryName&#34;&gt;Category name required&lt;/param&gt;\n         /// &lt;param name=&#34;description&#34;&gt;Category description&lt;/param&gt;\n         public static void InsertCategory(string categoryName, string description)\n         {\n             using var context = new NorthWindContext();\n             try\n             {\n                 var parameters = new[] {\n                     new SqlParameter(&#34;@CategoryName&#34;, SqlDbType.NVarChar)\n                     {\n                         Direction = ParameterDirection.Input, \n                         Value = categoryName\n                     },\n                     new SqlParameter(&#34;@Description&#34;, SqlDbType.NText)\n                     {\n                         Direction = ParameterDirection.Input, \n                         Value = description\n                     },\n                     new SqlParameter(&#34;@Identity&#34;, SqlDbType.Int)\n                     {\n                         Direction = ParameterDirection.Output, \n                         Value = 0\n                     }\n    \n                 };\n                 context.Database.ExecuteSqlRaw(\n                     &#34;exec uspInsertCategory @CategoryName,@Description,@Identity out&#34;, parameters: \n                     parameters);\n    \n                 var newPrimaryKey = Convert.ToInt32(parameters[2].Value);\n                 Debug.WriteLine(newPrimaryKey.ToString());\n    \n    \n             }\n             catch (Exception ex)\n             {\n                 Debug.WriteLine(ex.Message);\n             }\n         }\n     }\n }\n</code></pre>\n<p><strong>This is the model for above</strong></p>\n<pre><code> // &lt;auto-generated&gt; This file has been auto generated by EF Core Power Tools. &lt;/auto-generated&gt;\n using System;\n using System.Collections.Generic;\n using System.ComponentModel.DataAnnotations;\n    \n #nullable disable\n    \n namespace StoredProcedureInsertNewCategory.Models\n {\n     public partial class Category\n     {\n         /// &lt;summary&gt;\n         /// Primary key\n         /// &lt;/summary&gt;\n         [Required]\n         public int CategoryId { get; set; }\n         public string CategoryName { get; set; }\n         public string Description { get; set; }\n         public byte[] Picture { get; set; }\n     }\n }\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-13T00:58:53.397",
            "node": {
                "id": 196268,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> </p>\n<p>A very simple example, using a <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/blob/master/CalculateTextBoxes/Item.vb\">class named Item</a> and <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/blob/master/CalculateTextBoxes/NumericTextBox.vb\">NumericTextBox</a> (custom TextBox for ensuring only numerics are used and is a very basic TextBox). Full source code is in <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/CalculateTextBoxes\">this GitHub repository</a>.</p>\n<p><img src=\"/answers/storage/attachments/47510-a1.png\" alt=\"47510-a1.png\" /></p>\n<p>Class implementing INotifyPropertyChanged.</p>\n<pre><code> Imports System.ComponentModel\n Imports System.Runtime.CompilerServices\n    \n Public Class Item\n     Implements INotifyPropertyChanged\n     Private _value1 As Integer\n     Private _value2 As Integer\n     Private _value3 As Integer\n     Private _value4 As Integer\n    \n     Public Property Value1() As Integer\n         Get\n             Return _value1\n         End Get\n         Set\n             _value1 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Value2() As Integer\n         Get\n             Return _value2\n         End Get\n         Set\n             _value2 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Value3() As Integer\n         Get\n             Return _value3\n         End Get\n         Set\n             _value3 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Value4() As Integer\n         Get\n             Return _value4\n         End Get\n         Set\n             _value4 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public ReadOnly Property Total() As Integer\n         Get\n             Return Value1 + Value2 + Value3 + Value4\n         End Get\n     End Property\n     Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\n     Protected Overridable Sub OnPropertyChanged(&lt;CallerMemberName&gt; Optional memberName As String = Nothing)\n         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(memberName))\n     End Sub\n End Class\n</code></pre>\n<br /><h3>Numeric TextBox</h3>\n<br /><pre><code> Option Infer On\n    \n Imports System\n Imports System.ComponentModel\n Imports System.Windows.Forms\n    \n &#39;&#39;&#39; &lt;summary&gt;\n &#39;&#39;&#39; TextBox which only accepts numeric values along with asserting data copied from the Windows Clipboard\n &#39;&#39;&#39; &lt;/summary&gt;\n Public Class NumericTextBox\n     Inherits TextBox\n    \n     Private WM_KEYDOWN As Integer = &amp;H100\n     Private WM_PASTE As Integer = &amp;H302\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Handle key presses for non numeric data\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;msg&#34;&gt;Window message&lt;/param&gt;\n     &#39;&#39;&#39; &lt;returns&gt;bool from base&lt;/returns&gt;\n     Public Overrides Function PreProcessMessage(ByRef msg As Message) As Boolean\n         If msg.Msg = WM_KEYDOWN Then\n             Dim keys As Keys = CType(msg.WParam.ToInt32(), Keys)\n    \n             Dim numbers As Boolean = ((keys &gt;= Keys.D0 AndAlso keys &lt;= Keys.D9) OrElse\n                                       (keys &gt;= Keys.NumPad0 AndAlso keys &lt;= Keys.NumPad9)) AndAlso\n                                      ModifierKeys &lt;&gt; Keys.Shift\n    \n             Dim ctrl As Boolean = keys = Keys.Control\n    \n             Dim ctrlZ As Boolean = keys = Keys.Z AndAlso ModifierKeys = Keys.Control,\n                 ctrlX As Boolean = keys = Keys.X AndAlso ModifierKeys = Keys.Control, ctrlC As Boolean = keys = Keys.C AndAlso\n                     ModifierKeys = Keys.Control, ctrlV As Boolean = keys = Keys.V AndAlso\n                     ModifierKeys = Keys.Control, del As Boolean = keys = Keys.Delete,\n                 bksp As Boolean = keys = Keys.Back, arrows As Boolean = (keys = Keys.Up) Or (keys = Keys.Down) Or\n                                                                         (keys = Keys.Left) Or (keys = Keys.Right)\n    \n             If numbers Or ctrl Or del Or bksp Or arrows Or ctrlC Or ctrlX Or ctrlZ Then\n                 Return False\n    \n             ElseIf ctrlV Then\n                 &#39; handle pasting from clipboard\n                 Dim clipboardData = Clipboard.GetDataObject()\n                 Dim input = DirectCast(clipboardData.GetData(GetType(String)), String)\n                 For Each character In input\n                     If Not Char.IsDigit(character) Then\n                         Return True\n                     End If\n                 Next character\n                 Return False\n             Else\n                 Return True\n             End If\n         Else\n             Return MyBase.PreProcessMessage(msg)\n         End If\n     End Function\n    \n     &lt;Browsable(False)&gt;\n     Public ReadOnly Property AsInteger() As Integer\n         Get\n             Dim value As Integer\n             If Integer.TryParse(Text, value) Then\n                 Return value\n             Else\n                 Return 0\n             End If\n         End Get\n     End Property\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Monitor for non-numeric pasted from clipboard\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;m&#34;&gt;Windows message &lt;see cref=&#34;Message&#34;/&gt;&lt;/param&gt;\n     Protected Overrides Sub WndProc(ByRef m As Message)\n         If m.Msg = WM_PASTE Then\n             Dim clipboardData = Clipboard.GetDataObject()\n             Dim input = CStr(clipboardData?.GetData(GetType(String)))\n             For Each character In input\n                 If Not Char.IsDigit(character) Then\n                     m.Result = New IntPtr(0)\n                     Return\n                 End If\n             Next character\n         End If\n    \n         MyBase.WndProc(m)\n    \n     End Sub\n End Class\n</code></pre>\n<br /><br /><h3>Form code</h3>\n<br /><pre><code> Imports System.ComponentModel\n    \n Public Class Form1\n     Private BindingList As New BindingList(Of Item)\n    \n     Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n         BindingList = New BindingList(Of Item) From {New Item() With\n             {.Value1 = 12, .Value2 = 3, .Value3 = 100, .Value4 = 6}}\n    \n         NumericTextbox1.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value1&#34;)\n         NumericTextbox2.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value2&#34;)\n         NumericTextbox3.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value3&#34;)\n         NumericTextbox4.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value4&#34;)\n         NumericTextbox5.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Total&#34;)\n     End Sub\n End Class\n</code></pre>\n<br /><br /><h1>Edit: Dynamic version of the above</h1>\n<p>Since you have more TextBoxes then originally thought the following uses a language extension (can be done without an extension yet this is cleaner and usable in any project) to get all NumericTextBoxes into a list. The only downside to this is you need to replace you current TextBox controls with the one I use.</p>\n<pre><code> Namespace Classes\n     Public Module ControlExtensions\n         &lt;Runtime.CompilerServices.Extension&gt;\n         Public Iterator Function Descendants(Of T As Class)(control As Control) As IEnumerable(Of T)\n             For Each child As Control In control.Controls\n    \n                 Dim currentChild = TryCast(child, T)\n                 If currentChild IsNot Nothing Then\n                     Yield currentChild\n                 End If\n    \n                 If child.HasChildren Then\n                     For Each descendant As T In child.Descendants(Of T)()\n                         Yield descendant\n                     Next\n                 End If\n             Next\n    \n         End Function\n         &lt;Runtime.CompilerServices.Extension&gt;\n         Public Function NumericTextBoxList(pControl As Control) As List(Of NumericTextBox)\n             Return pControl.Descendants(Of NumericTextBox)().ToList()\n         End Function\n    \n         &#39;&#39;&#39; &lt;summary&gt;\n         &#39;&#39;&#39; Get names of controls \n         &#39;&#39;&#39; &lt;/summary&gt;\n         &#39;&#39;&#39; &lt;param name=&#34;pControls&#34;&gt;&lt;/param&gt;\n         &#39;&#39;&#39; &lt;returns&gt;&lt;/returns&gt;\n         &lt;Runtime.CompilerServices.Extension&gt;\n         Public Function ControlNames(pControls As IEnumerable(Of Control)) As String()\n             Return pControls.Select(Function(c) c.Name).ToArray()\n         End Function\n    \n     End Module\n End Namespace\n</code></pre>\n<br /><h2>Here is all you need in the form.</h2>\n<br /><pre><code> Public Class Form1\n     Private BindingList As New BindingList(Of Item)\n    \n     Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n    \n         BindingList = New BindingList(Of Item) From {New Item() With\n             {.Value1 = 0, .Value2 = 0, .Value3 = 0, .Value4 = 0}}\n    \n         For Each numericTextBox As NumericTextBox In NumericTextBoxList\n             Dim index = Integer.Parse(Regex.Replace(numericTextBox.Name, &#34;[^\\d]&#34;, &#34;&#34;))\n             numericTextBox.DataBindings.Add(&#34;Text&#34;, BindingList, $&#34;Value{index}&#34;)\n         Next\n    \n         TotalLabel.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Total&#34;)\n     End Sub\n End Class\n</code></pre>\n<br /><p>Note that I use a Label for total this time but could also use a regular TextBox.</p>\n<h1>Summary</h1>\n<br /><p>We are developers strive to write short, efficient and concise which is all well and good yet short is not always efficient and concise. Then there needs to be a willingness to refactor rather than try to fit a square peg in a around hole. Which brings me to the following point, when I post code it&#39;s for your benefit, not mine to allow you and others become better coders.</p>\n<p><a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/CalculateTextBoxes\">Source code</a> has been updated to match the edit section above.</p>\n<br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-13T00:25:19.057",
            "node": {
                "id": 196345,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> </p>\n<p>I would highly recommend not using <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualbasic.conversion.val?view=net-5.0\">Val method</a> as there can be unexpected results as the following shows along with the return type is Double. One typically used Integer, Double, Decimal TryParse which in your case both Val and <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.int32.tryparse?view=net-5.0\">TryParse</a> are not great as you have a lot of TextBoxes. This is the reason for the number TextBox. </p>\n<pre><code> Dim valResult As Double\n &#39; The following line of code sets valResult to 2457.\n valResult = Val(&#34;2457&#34;)\n &#39; The following line of code sets valResult to 2457.\n valResult = Val(&#34; 2 45 7&#34;)\n &#39; The following line of code sets valResult to 24.\n valResult = Val(&#34;24 and 57&#34;)\n</code></pre>\n<br /><br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-12T21:36:29.92",
            "node": {
                "id": 196268,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> </p>\n<p>A very simple example, using a <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/blob/master/CalculateTextBoxes/Item.vb\">class named Item</a> and <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/blob/master/CalculateTextBoxes/NumericTextBox.vb\">NumericTextBox</a> (custom TextBox for ensuring only numerics are used and is a very basic TextBox). Full source code is in <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/CalculateTextBoxes\">this GitHub repository</a>.</p>\n<p><img src=\"/answers/storage/attachments/47510-a1.png\" alt=\"47510-a1.png\" /></p>\n<p>Class implementing INotifyPropertyChanged.</p>\n<pre><code> Imports System.ComponentModel\n Imports System.Runtime.CompilerServices\n    \n Public Class Item\n     Implements INotifyPropertyChanged\n     Private _value1 As Integer\n     Private _value2 As Integer\n     Private _value3 As Integer\n     Private _value4 As Integer\n    \n     Public Property Value1() As Integer\n         Get\n             Return _value1\n         End Get\n         Set\n             _value1 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Value2() As Integer\n         Get\n             Return _value2\n         End Get\n         Set\n             _value2 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Value3() As Integer\n         Get\n             Return _value3\n         End Get\n         Set\n             _value3 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public Property Value4() As Integer\n         Get\n             Return _value4\n         End Get\n         Set\n             _value4 = Value\n             OnPropertyChanged()\n         End Set\n     End Property\n    \n     Public ReadOnly Property Total() As Integer\n         Get\n             Return Value1 + Value2 + Value3 + Value4\n         End Get\n     End Property\n     Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\n     Protected Overridable Sub OnPropertyChanged(&lt;CallerMemberName&gt; Optional memberName As String = Nothing)\n         RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(memberName))\n     End Sub\n End Class\n</code></pre>\n<br /><h3>Numeric TextBox</h3>\n<br /><pre><code> Option Infer On\n    \n Imports System\n Imports System.ComponentModel\n Imports System.Windows.Forms\n    \n &#39;&#39;&#39; &lt;summary&gt;\n &#39;&#39;&#39; TextBox which only accepts numeric values along with asserting data copied from the Windows Clipboard\n &#39;&#39;&#39; &lt;/summary&gt;\n Public Class NumericTextBox\n     Inherits TextBox\n    \n     Private WM_KEYDOWN As Integer = &amp;H100\n     Private WM_PASTE As Integer = &amp;H302\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Handle key presses for non numeric data\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;msg&#34;&gt;Window message&lt;/param&gt;\n     &#39;&#39;&#39; &lt;returns&gt;bool from base&lt;/returns&gt;\n     Public Overrides Function PreProcessMessage(ByRef msg As Message) As Boolean\n         If msg.Msg = WM_KEYDOWN Then\n             Dim keys As Keys = CType(msg.WParam.ToInt32(), Keys)\n    \n             Dim numbers As Boolean = ((keys &gt;= Keys.D0 AndAlso keys &lt;= Keys.D9) OrElse\n                                       (keys &gt;= Keys.NumPad0 AndAlso keys &lt;= Keys.NumPad9)) AndAlso\n                                      ModifierKeys &lt;&gt; Keys.Shift\n    \n             Dim ctrl As Boolean = keys = Keys.Control\n    \n             Dim ctrlZ As Boolean = keys = Keys.Z AndAlso ModifierKeys = Keys.Control,\n                 ctrlX As Boolean = keys = Keys.X AndAlso ModifierKeys = Keys.Control, ctrlC As Boolean = keys = Keys.C AndAlso\n                     ModifierKeys = Keys.Control, ctrlV As Boolean = keys = Keys.V AndAlso\n                     ModifierKeys = Keys.Control, del As Boolean = keys = Keys.Delete,\n                 bksp As Boolean = keys = Keys.Back, arrows As Boolean = (keys = Keys.Up) Or (keys = Keys.Down) Or\n                                                                         (keys = Keys.Left) Or (keys = Keys.Right)\n    \n             If numbers Or ctrl Or del Or bksp Or arrows Or ctrlC Or ctrlX Or ctrlZ Then\n                 Return False\n    \n             ElseIf ctrlV Then\n                 &#39; handle pasting from clipboard\n                 Dim clipboardData = Clipboard.GetDataObject()\n                 Dim input = DirectCast(clipboardData.GetData(GetType(String)), String)\n                 For Each character In input\n                     If Not Char.IsDigit(character) Then\n                         Return True\n                     End If\n                 Next character\n                 Return False\n             Else\n                 Return True\n             End If\n         Else\n             Return MyBase.PreProcessMessage(msg)\n         End If\n     End Function\n    \n     &lt;Browsable(False)&gt;\n     Public ReadOnly Property AsInteger() As Integer\n         Get\n             Dim value As Integer\n             If Integer.TryParse(Text, value) Then\n                 Return value\n             Else\n                 Return 0\n             End If\n         End Get\n     End Property\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Monitor for non-numeric pasted from clipboard\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;m&#34;&gt;Windows message &lt;see cref=&#34;Message&#34;/&gt;&lt;/param&gt;\n     Protected Overrides Sub WndProc(ByRef m As Message)\n         If m.Msg = WM_PASTE Then\n             Dim clipboardData = Clipboard.GetDataObject()\n             Dim input = CStr(clipboardData?.GetData(GetType(String)))\n             For Each character In input\n                 If Not Char.IsDigit(character) Then\n                     m.Result = New IntPtr(0)\n                     Return\n                 End If\n             Next character\n         End If\n    \n         MyBase.WndProc(m)\n    \n     End Sub\n End Class\n</code></pre>\n<br /><br /><h3>Form code</h3>\n<br /><pre><code> Imports System.ComponentModel\n    \n Public Class Form1\n     Private BindingList As New BindingList(Of Item)\n    \n     Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n         BindingList = New BindingList(Of Item) From {New Item() With\n             {.Value1 = 12, .Value2 = 3, .Value3 = 100, .Value4 = 6}}\n    \n         NumericTextbox1.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value1&#34;)\n         NumericTextbox2.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value2&#34;)\n         NumericTextbox3.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value3&#34;)\n         NumericTextbox4.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Value4&#34;)\n         NumericTextbox5.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Total&#34;)\n     End Sub\n End Class\n</code></pre>\n<br /><br /><h1>Edit: Dynamic version of the above</h1>\n<p>Since you have more TextBoxes then originally thought the following uses a language extension (can be done without an extension yet this is cleaner and usable in any project) to get all NumericTextBoxes into a list. The only downside to this is you need to replace you current TextBox controls with the one I use.</p>\n<pre><code> Namespace Classes\n     Public Module ControlExtensions\n         &lt;Runtime.CompilerServices.Extension&gt;\n         Public Iterator Function Descendants(Of T As Class)(control As Control) As IEnumerable(Of T)\n             For Each child As Control In control.Controls\n    \n                 Dim currentChild = TryCast(child, T)\n                 If currentChild IsNot Nothing Then\n                     Yield currentChild\n                 End If\n    \n                 If child.HasChildren Then\n                     For Each descendant As T In child.Descendants(Of T)()\n                         Yield descendant\n                     Next\n                 End If\n             Next\n    \n         End Function\n         &lt;Runtime.CompilerServices.Extension&gt;\n         Public Function NumericTextBoxList(pControl As Control) As List(Of NumericTextBox)\n             Return pControl.Descendants(Of NumericTextBox)().ToList()\n         End Function\n    \n         &#39;&#39;&#39; &lt;summary&gt;\n         &#39;&#39;&#39; Get names of controls \n         &#39;&#39;&#39; &lt;/summary&gt;\n         &#39;&#39;&#39; &lt;param name=&#34;pControls&#34;&gt;&lt;/param&gt;\n         &#39;&#39;&#39; &lt;returns&gt;&lt;/returns&gt;\n         &lt;Runtime.CompilerServices.Extension&gt;\n         Public Function ControlNames(pControls As IEnumerable(Of Control)) As String()\n             Return pControls.Select(Function(c) c.Name).ToArray()\n         End Function\n    \n     End Module\n End Namespace\n</code></pre>\n<br /><h2>Here is all you need in the form.</h2>\n<br /><pre><code> Public Class Form1\n     Private BindingList As New BindingList(Of Item)\n    \n     Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n    \n         BindingList = New BindingList(Of Item) From {New Item() With\n             {.Value1 = 0, .Value2 = 0, .Value3 = 0, .Value4 = 0}}\n    \n         For Each numericTextBox As NumericTextBox In NumericTextBoxList\n             Dim index = Integer.Parse(Regex.Replace(numericTextBox.Name, &#34;[^\\d]&#34;, &#34;&#34;))\n             numericTextBox.DataBindings.Add(&#34;Text&#34;, BindingList, $&#34;Value{index}&#34;)\n         Next\n    \n         TotalLabel.DataBindings.Add(&#34;Text&#34;, BindingList, &#34;Total&#34;)\n     End Sub\n End Class\n</code></pre>\n<br /><p>Note that I use a Label for total this time but could also use a regular TextBox.</p>\n<h1>Summary</h1>\n<br /><p>We are developers strive to write short, efficient and concise which is all well and good yet short is not always efficient and concise. Then there needs to be a willingness to refactor rather than try to fit a square peg in a around hole. Which brings me to the following point, when I post code it&#39;s for your benefit, not mine to allow you and others become better coders.</p>\n<p><a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/CalculateTextBoxes\">Source code</a> has been updated to match the edit section above.</p>\n<br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-12T20:18:12.857",
            "node": {
                "id": 196264,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4978993\" href=\"/answers/users/4978993/williamsonstephen-8510.html\">@WilliamsonStephen-8510</a> </p>\n<p>Here is an example using EF Core 5 inserting a new record into a table and returning the new primary key. Full source in the following <a href=\"https://github.com/karenpayneoregon/efcore5-getting-started/tree/master/StoredProcedureInsertNewCategory\">GitHub repository</a>.</p>\n<h3>Table definition</h3>\n<p><img src=\"/answers/storage/attachments/47605-a1.png\" alt=\"47605-a1.png\" /></p>\n<br /><h3>Stored procedure</h3>\n<br /><p>Insert stored procedure in SQL-Server database containing the table above.</p>\n<pre><code> CREATE PROCEDURE [dbo].[uspInsertCategory]  \n     @CategoryName NVARCHAR(15), \n     @Description ntext, \n     @Identity INT OUT \n AS \n BEGIN \n     -- SET NOCOUNT ON added to prevent extra result sets from \n     -- interfering with SELECT statements. \n     SET NOCOUNT ON; \n INSERT INTO dbo.Categories (CategoryName, Description) VALUES (@CategoryName, @Description);\n SET @Identity = SCOPE_IDENTITY() \n     \n END \n</code></pre>\n<br /><h3>Code</h3>\n<br /><p>Code to insert a new record. Pay attention to the second parameter which after the command is finished if successful contains the new primary key where the parameter is setup as Output directions.</p>\n<br /><pre><code> using System;\n using System.Collections.Generic;\n using System.Data;\n using System.Diagnostics;\n using System.Text;\n using Microsoft.Data.SqlClient;\n using Microsoft.EntityFrameworkCore;\n using StoredProcedureInsertNewCategory.Context;\n    \n namespace StoredProcedureInsertNewCategory.Classes\n {\n     public class Operations\n     {\n         /// &lt;summary&gt;\n         /// Insert new category\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;categoryName&#34;&gt;Category name required&lt;/param&gt;\n         /// &lt;param name=&#34;description&#34;&gt;Category description&lt;/param&gt;\n         public static void InsertCategory(string categoryName, string description)\n         {\n             using var context = new NorthWindContext();\n             try\n             {\n                 var parameters = new[] {\n                     new SqlParameter(&#34;@CategoryName&#34;, SqlDbType.NVarChar)\n                     {\n                         Direction = ParameterDirection.Input, \n                         Value = categoryName\n                     },\n                     new SqlParameter(&#34;@Description&#34;, SqlDbType.NText)\n                     {\n                         Direction = ParameterDirection.Input, \n                         Value = description\n                     },\n                     new SqlParameter(&#34;@Identity&#34;, SqlDbType.Int)\n                     {\n                         Direction = ParameterDirection.Output, \n                         Value = 0\n                     }\n    \n                 };\n                 context.Database.ExecuteSqlRaw(\n                     &#34;exec uspInsertCategory @CategoryName,@Description,@Identity out&#34;, parameters: \n                     parameters);\n    \n                 var newPrimaryKey = Convert.ToInt32(parameters[2].Value);\n                 Debug.WriteLine(newPrimaryKey.ToString());\n    \n    \n             }\n             catch (Exception ex)\n             {\n                 Debug.WriteLine(ex.Message);\n             }\n         }\n     }\n }\n</code></pre>\n<p><strong>This is the model for above</strong></p>\n<pre><code> // &lt;auto-generated&gt; This file has been auto generated by EF Core Power Tools. &lt;/auto-generated&gt;\n using System;\n using System.Collections.Generic;\n using System.ComponentModel.DataAnnotations;\n    \n #nullable disable\n    \n namespace StoredProcedureInsertNewCategory.Models\n {\n     public partial class Category\n     {\n         /// &lt;summary&gt;\n         /// Primary key\n         /// &lt;/summary&gt;\n         [Required]\n         public int CategoryId { get; set; }\n         public string CategoryName { get; set; }\n         public string Description { get; set; }\n         public byte[] Picture { get; set; }\n     }\n }\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-12T20:04:32.157",
            "node": {
                "id": 196264,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4978993\" href=\"/answers/users/4978993/williamsonstephen-8510.html\">@WilliamsonStephen-8510</a> </p>\n<p>Here is an example using EF Core 5 inserting a new record into a table and returning the new primary key. Full source in the following <a href=\"https://github.com/karenpayneoregon/efcore5-getting-started/tree/master/StoredProcedureInsertNewCategory\">GitHub repository</a>.</p>\n<h3>Table definition</h3>\n<p><img src=\"/answers/storage/attachments/47605-a1.png\" alt=\"47605-a1.png\" /></p>\n<br /><h3>Stored procedure</h3>\n<br /><p>Insert stored procedure in SQL-Server database containing the table above.</p>\n<pre><code> CREATE PROCEDURE [dbo].[uspInsertCategory]  \n     @CategoryName NVARCHAR(15), \n     @Description ntext, \n     @Identity INT OUT \n AS \n BEGIN \n     -- SET NOCOUNT ON added to prevent extra result sets from \n     -- interfering with SELECT statements. \n     SET NOCOUNT ON; \n INSERT INTO dbo.Categories (CategoryName, Description) VALUES (@CategoryName, @Description);\n SET @Identity = SCOPE_IDENTITY() \n     \n END \n</code></pre>\n<br /><h3>Code</h3>\n<br /><p>Code to insert a new record. Pay attention to the second parameter which after the command is finished if successful contains the new primary key where the parameter is setup as Output directions.</p>\n<br /><pre><code> using System;\n using System.Collections.Generic;\n using System.Data;\n using System.Diagnostics;\n using System.Text;\n using Microsoft.Data.SqlClient;\n using Microsoft.EntityFrameworkCore;\n using StoredProcedureInsertNewCategory.Context;\n    \n namespace StoredProcedureInsertNewCategory.Classes\n {\n     public class Operations\n     {\n         /// &lt;summary&gt;\n         /// Insert new category\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;categoryName&#34;&gt;Category name required&lt;/param&gt;\n         /// &lt;param name=&#34;description&#34;&gt;Category description&lt;/param&gt;\n         public static void InsertCategory(string categoryName, string description)\n         {\n             using var context = new NorthWindContext();\n             try\n             {\n                 var parameters = new[] {\n                     new SqlParameter(&#34;@CategoryName&#34;, SqlDbType.NVarChar)\n                     {\n                         Direction = ParameterDirection.Input, \n                         Value = categoryName\n                     },\n                     new SqlParameter(&#34;@Description&#34;, SqlDbType.NText)\n                     {\n                         Direction = ParameterDirection.Input, \n                         Value = description\n                     },\n                     new SqlParameter(&#34;@Identity&#34;, SqlDbType.Int)\n                     {\n                         Direction = ParameterDirection.Output, \n                         Value = 0\n                     }\n    \n                 };\n                 context.Database.ExecuteSqlRaw(\n                     &#34;exec uspInsertCategory @CategoryName,@Description,@Identity out&#34;, parameters: \n                     parameters);\n    \n                 var newPrimaryKey = Convert.ToInt32(parameters[2].Value);\n                 Debug.WriteLine(newPrimaryKey.ToString());\n    \n    \n             }\n             catch (Exception ex)\n             {\n                 Debug.WriteLine(ex.Message);\n             }\n         }\n     }\n }\n</code></pre>\n<p><strong>This is the model for above</strong></p>\n<pre><code> // &lt;auto-generated&gt; This file has been auto generated by EF Core Power Tools. &lt;/auto-generated&gt;\n using System;\n using System.Collections.Generic;\n using System.ComponentModel.DataAnnotations;\n    \n #nullable disable\n    \n namespace StoredProcedureInsertNewCategory.Models\n {\n     public partial class Category\n     {\n         /// &lt;summary&gt;\n         /// Primary key\n         /// &lt;/summary&gt;\n         [Required]\n         public int CategoryId { get; set; }\n         public string CategoryName { get; set; }\n         public string Description { get; set; }\n         public byte[] Picture { get; set; }\n     }\n }\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-12T18:26:05.96",
            "node": {
                "id": 196198,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"2326408\" href=\"/answers/users/2326408/andrearossi-3935.html\">@AndreaRossi-3935</a> if using ASP.NET Core, see <a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-5.0&amp;tabs=visual-studio\">Introduction to Identity on ASP.NET Core from Microsoft</a> and for self-hosting see the following <a href=\"https://github.com/okta/samples-aspnet-webforms\">GitHub repository</a>. Note if Azure is what you want make sure to consider cost for both online and on prem where on prem is lower cost.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-12T18:24:10.467"
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-12T18:23:50.637",
            "node": {
                "id": 196198,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"2326408\" href=\"/answers/users/2326408/andrearossi-3935.html\">@AndreaRossi-3935</a> if using ASP.NET Core, see <a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-5.0&amp;tabs=visual-studio\">Introduction to Identity on ASP.NET Core from Microsoft</a> and for self-hosting see the following <a href=\"https://github.com/okta/samples-aspnet-webforms\">GitHub repository</a>. Note if Azure is what you want make sure to consider cost for both online and on prem where on prem is lower cost.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-12T11:52:50.18",
            "node": {
                "id": 196106,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4942644\" href=\"/answers/users/4942644/brandonstewart-4522.html\">@BrandonStewart-4522</a>  how are you making out with this? Have you tried Viorel-1 suggestion e.g.</p>\n<p><img src=\"/answers/storage/temp/47593-a1.png\" alt=\"47593-a1.png\" /></p>\n<p><img src=\"/answers/storage/temp/47631-a2.png\" alt=\"47631-a2.png\" /></p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-10T23:19:42.07"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-10T23:19:32.663",
            "node": {
                "id": 194414,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4782421\" href=\"/answers/users/4782421/hobbyistprogrammer-7674.html\">@Hobbyistprogrammer-7674</a> </p>\n<p>The following uses a language extension originally done in C# (<a href=\"https://stackoverflow.com/questions/17490080/how-to-do-a-sum-using-dynamic-linq/17490348\">see post</a>), done below in VB.</p>\n<p>The example will use property names as strings against the following class</p>\n<pre><code> Public Class Sample\n     Public Property Weight() As Double\n     Public Property Height() As Double\n     Public Property Group() As Integer\n End Class\n</code></pre>\n<br /><p>Here to test a mocked up list for Sample class above.</p>\n<pre><code> Public Class Mocked\n\n     Public Shared Function SampleList() As List(Of Sample)\n         Return New List(Of Sample) From {\n             New Sample() With {.Group = 1, .Height = 12.4D, .Weight = 100.3D},\n             New Sample() With {.Group = 1, .Height = 22.4D, .Weight = 10.4D}\n         }\n     End Function\n End Class\n</code></pre>\n<br /><br /><p>Extension method</p>\n<pre><code> Public Module Extensions\n     &lt;Runtime.CompilerServices.Extension&gt;\n     Public Function Sum(source As IQueryable, member As String) As Object\n         If source Is Nothing Then\n             Throw New ArgumentNullException(NameOf(source))\n         End If\n    \n         If member Is Nothing Then\n             Throw New ArgumentNullException(NameOf(member))\n         End If\n    \n         &#39; The most common variant of Queryable.Sum() expects a lambda.\n         &#39; Since we just have a string to a property, we need to create a\n         &#39; lambda from the string in order to pass it to the sum method.\n    \n         &#39; Lets create a ((TSource s) =&gt; s.Price ). First up, the parameter &#34;s&#34;:\n         Dim parameter As ParameterExpression = Expression.Parameter(source.ElementType, &#34;s&#34;)\n    \n         &#39; Followed by accessing the Price property of &#34;s&#34; (s.Price):\n         Dim [property] As PropertyInfo = source.ElementType.GetProperty(member)\n         Dim getter As MemberExpression = Expression.MakeMemberAccess(parameter, [property])\n    \n         &#39; And finally, we create a lambda from that. First specifying on what\n         &#39; to execute when the lambda is called, and finally the parameters of the lambda.\n         Dim selector As Expression = Expression.Lambda(getter, parameter)\n    \n         &#39; There are a lot of Queryable.Sum() overloads with different\n         &#39; return types  (double, int, decimal, double?, int?, etc...).\n         &#39; We&#39;re going to find one that matches the type of our property.\n         Dim sumMethod As MethodInfo = GetType(Queryable).GetMethods().First(\n             Function(m) m.Name = &#34;Sum&#34; AndAlso m.ReturnType = [property].PropertyType AndAlso m.IsGenericMethod)\n    \n         &#39; Now that we have the correct method, we need to know how to call the method.\n         &#39; Note that the Queryable.Sum&lt;TSource&gt;(source, selector) has a generic type,\n         &#39; which we haven&#39;t resolved yet. Good thing is that we can use copy the one from\n         &#39; our initial source expression.\n         Dim genericSumMethod = sumMethod.MakeGenericMethod({source.ElementType})\n    \n         &#39; TSource, source and selector are now all resolved. We now know how to call\n         &#39; the sum-method. We&#39;re not going to call it here, we just express how we&#39;re going\n         &#39; call it.\n         Dim callExpression = Expression.Call(Nothing, genericSumMethod, {source.Expression, Expression.Quote(selector)})\n    \n         &#39; Pass it down to the query provider. This can be a simple LinqToObject-data source,\n         &#39; but also a more complex datasource (such as LinqToSql). Anyway, it knows what to\n         &#39; do.\n         Return source.Provider.Execute(callExpression)\n    \n     End Function\n    \n End Module\n</code></pre>\n<br /><p><strong>Now let&#39;s perform sum against the two double properties</strong>.</p>\n<pre><code> Public Class Operations\n     Public Shared Sub Example1()\n    \n         Dim heightResults = Mocked.SampleList().AsQueryable().Sum(&#34;Height&#34;)\n         Dim weightResults = Mocked.SampleList().AsQueryable().Sum(&#34;Weight&#34;)\n    \n         Debug.WriteLine($&#34;Height sum: {heightResults}&#34;)\n         Debug.WriteLine($&#34;Weight sum: {weightResults}&#34;)\n    \n     End Sub\n    \n End Class\n</code></pre>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-10T16:13:37.04",
            "node": {
                "id": 193730,
                "title": null,
                "body": "<p>Never used locks like this so I can&#39;t say, only have used singleton and classes under <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent?view=net-5.0\">System.Collections.Concurrent</a>. Best guess is you need a lock on both and test for the possibilities for <a href=\"https://docs.microsoft.com/en-us/archive/msdn-magazine/2006/april/avoiding-and-detecting-deadlocks-in-net-apps-with-csharp-and-c\">deadlocks</a>. In any case I&#39;d refactor as I&#39;ve shown or similar.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-10T15:15:30.793"
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-10T15:15:21.57",
            "node": {
                "id": 193845,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"2688043\" href=\"/answers/users/2688043/osd-4642.html\">@OSD-4642</a> </p>\n<p>Place a breakpoint on the File.Copy line, when hit examine Chrone_dstDir, see if there is one element.</p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-10T15:10:40.79",
            "node": {
                "id": 193818,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"3042836\" href=\"/answers/users/3042836/markusfreitag-0088.html\">@MarkusFreitag-0088</a> I provided about as simple as you can get, <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.lazy-1?view=net-5.0\">Lazy is described here</a>. If you have not <a href=\"https://csharpindepth.com/articles/singleton\">read this</a> you need to as me writing up what is written there serves nobody.</p>\n<p>Since I exposed a list you have methods and properties which are always available without a singleton.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-10T13:33:57.773"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-10T13:33:47.923",
            "node": {
                "id": 193666,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"3042836\" href=\"/answers/users/3042836/markusfreitag-0088.html\">@MarkusFreitag-0088</a> </p>\n<p>Have you considered using a thread-safe Singleton? The following is based off <a href=\"https://csharpindepth.com/articles/singleton\">this web page sixth version</a>.</p>\n<pre><code> public class Address\n {\n     public string Type { get; set; }\n     public string Company { get; set; }\n     public string Number { get; set; }\n     public string Street { get; set; }\n     public string City { get; set; }\n }\n\n public partial class Person\n {\n     public int Id { get; set; }\n     public string FirstName { get; set; }\n     public string LastName { get; set; }\n     public DateTime? DateOfBirth { get; set; }\n     public IList&lt;Address&gt; Addresses { get; set; }   \n }\n</code></pre>\n<br /><p>Singleton</p>\n<pre><code> public sealed class Sample\n {\n     private static readonly Lazy&lt;Sample&gt; Lazy =\n         new Lazy&lt;Sample&gt;(() =&gt;\n             new Sample());\n    \n     /// &lt;summary&gt;\n     /// Entry point to access information in this class\n     /// &lt;/summary&gt;\n     public static Sample Instance =&gt; Lazy.Value;\n     public List&lt;Person&gt; People { get; set; }\n    \n     private Sample()\n     {\n         People = new List&lt;Person&gt;();\n     }\n }\n</code></pre>\n<br /><p>Add in one thread</p>\n<pre><code> Sample.Instance.People.Add(new Person() {FirstName = &#34;Karen&#34;, LastName = &#34;Payne&#34;});\n</code></pre>\n<br /><p>Read in another thread (or add etc if you want)</p>\n<pre><code> foreach (var person in Sample.Instance.People)\n {\n     Console.WriteLine($&#34;{person.FirstName} {person.LastName}&#34;);\n }\n</code></pre>\n<br /><br /><br /><br /><br /><br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-10T13:11:31.433"
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-10T13:11:22.567",
            "node": {
                "id": 193694,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4612889\" href=\"/answers/users/4612889/ronaldvanderwesthuizen-8441.html\">@RonaldVanDerWesthuizen-8441</a> If  using Entity Framework Core and you have json stored in a nvarchar column a converter can be used to serialize (for adding) and deserialize for reading back as strong typed model along with extracting just the json as a string. You would then pass the json string to your POST task. If this is the case I can provide a code sample for the database part but not the web service as it appears to be a specific type of service I know nothing about.</p>\n<pre><code> var personJsonAddresses = Operations.GetPersons().FirstOrDefault()?.AddressJson;\n</code></pre>\n<br /><p> <img src=\"/answers/storage/temp/46879-b3.png\" alt=\"46879-b3.png\" /></p>\n<p><img src=\"/answers/storage/temp/46963-b1.png\" alt=\"46963-b1.png\" /><br /><img src=\"/answers/storage/temp/46905-b2.png\" alt=\"46905-b2.png\" /></p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-09T20:52:59.52"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-09T20:52:50.397",
            "node": {
                "id": 192459,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> </p>\n<p>The following only does the last record marked as deleted (not actually deleted) and if more are needed will require more logic.  In the table, there is a primary key id, first and last names as strings then IsDeleted as a Boolean.</p>\n<p>Note that there may be some minor alterations needed as I had limited time to write this up but you should get the idea. Note also, working with a TableAdapter in this case requires much more code than using non TableAdapter methods to access data and that there are frameworks out there for undo and redo but not for TableAdapter or DataSet or DataTables.</p>\n<p>In the .xsd</p>\n<p>Read non deleted data</p>\n<pre><code> SELECT        Id, FirstName, LastName, IsDeleted\n FROM            Person2\n WHERE        (IsDeleted = 0)\n</code></pre>\n<br /><p>Get deleted records</p>\n<pre><code> SELECT        Id, FirstName, LastName, IsDeleted\n FROM            Person2\n WHERE        (IsDeleted = 1)\n</code></pre>\n<br /><p>Get single person record</p>\n<pre><code> SELECT        Id, FirstName, LastName, IsDeleted\n FROM            Person2\n WHERE        (Id = @Id)\n</code></pre>\n<br /><br /><p>The above is for one TableAdapter, the following to get the last record deleted with no custom query.</p>\n<p>Form code (easy enough to figure out</p>\n<pre><code> Public Class Form1\n     Private Sub Person2BindingNavigatorSaveItem_Click(sender As Object, e As EventArgs) _\n         Handles Person2BindingNavigatorSaveItem.Click\n    \n         Validate()\n         Person2BindingSource.EndEdit()\n         TableAdapterManager.UpdateAll(ForumExampleDataSet)\n    \n         &#39;\n         &#39; Reload from database\n         &#39;\n         Person2TableAdapter.FillByNotDeletedRecords(ForumExampleDataSet.Person2)\n    \n     End Sub\n    \n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n         Person2TableAdapter.FillByNotDeletedRecords(ForumExampleDataSet.Person2)\n     End Sub\n    \n     Private Sub BindingNavigatorDeleteItem_Click(sender As Object, e As EventArgs) _\n         Handles BindingNavigatorDeleteItem.Click\n    \n         &#39;\n         &#39; Check for stored key from person2 table\n         &#39;\n         Person2TrackerTableAdapter.Fill(ForumExampleDataSet1.Person2Tracker)\n    \n         &#39;\n         &#39; Get current row primary key\n         &#39;\n         Dim row = CType(Person2BindingSource.Current, DataRowView).Row\n         Dim currentId = row.Field(Of Integer)(&#34;Id&#34;)\n    \n         &#39;\n         &#39; Do we need a row or modify the single row\n         &#39;\n         If ForumExampleDataSet1.Person2Tracker.Rows.Count = 0 Then\n             ForumExampleDataSet1.Person2Tracker.Rows.Add(New Object() {Nothing, currentId})\n         Else\n             ForumExampleDataSet1.Person2Tracker.Rows(0).SetField(&#34;LastPersonIdentifier&#34;, currentId)\n         End If\n    \n    \n         &#39;\n         &#39; Save changes to tracker table\n         &#39;\n         Person2TrackerTableAdapter.Update(ForumExampleDataSet1.Person2Tracker)\n    \n         &#39;\n         &#39; Set current row as deleted and set in save button code\n         &#39;\n         row.SetField(&#34;IsDeleted&#34;, True)\n    \n     End Sub\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Undue last set to deleted row\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub UndueButton_Click(sender As Object, e As EventArgs) Handles UndueButton.Click\n         &#39;\n         &#39; Get tracking record\n         &#39;\n         Person2TrackerTableAdapter.Fill(ForumExampleDataSet1.Person2Tracker)\n    \n         If ForumExampleDataSet1.Person2Tracker.Rows.Count = 1 Then\n    \n             Dim dt As New ForumExampleDataSet.Person2DataTable\n             Person2TableAdapter.FillByGetDeletedRecords(dt)\n    \n             Dim savedId = ForumExampleDataSet1.Person2Tracker.\n                     Rows(0).\n                     Field(Of Integer)(&#34;LastPersonIdentifier&#34;)\n    \n             Dim row = dt.AsEnumerable().FirstOrDefault(Function(pRow) pRow.Id = savedId)\n    \n             If row IsNot Nothing Then\n                 &#39;\n                 &#39; Set not deleted, save, reload\n                 &#39;\n                 row.SetField(&#34;IsDeleted&#34;, False)\n                 Person2TableAdapter.Update(dt)\n                 Person2TableAdapter.FillByNotDeletedRecords(ForumExampleDataSet.Person2)\n                 Person2BindingSource.ResetBindings(True)\n             End If\n    \n         End If\n     End Sub\n End Class\n</code></pre>\n<br /><p>In the screenshot I told the delete button to do nothing from the property window, added a undue button (last button)</p>\n<p><img src=\"/answers/storage/attachments/46695-a2.png\" alt=\"46695-a2.png\" /></p>\n<br /><p><img src=\"/answers/storage/attachments/46712-a1.png\" alt=\"46712-a1.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-09T18:56:22.387"
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-09T18:56:16.15",
            "node": {
                "id": 192563,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> One idea is to use a column type boolean named IsDeleted. Rather than delete a row, set IsDeleted = True. You initial SELECT would need a WHERE condition to filter out IsDeleted=True. The undue would come from mirror image SELECT, present to the user a row to bring back. There is a good deal more to this, if all you want is undue deleted I can put something together (in sql-server but will work in ms-access).<br /></p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-08T16:23:33.083",
            "node": {
                "id": 190794,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4816585\" href=\"/answers/users/4816585/kurtk-5456.html\">@KurtK-5456</a> </p>\n<p>Have you tried installing <a href=\"https://www.nuget.org/packages/System.Data.SqlClient/\">this package</a>. </p>\n<br /><p>This is asked because of  <strong>System.DllNotFoundException: sni.dll assembly</strong> which uses internal packages below which are not meant for direct usage.</p>\n<p><a href=\"https://www.nuget.org/packages/runtime.win-x64.runtime.native.System.Data.SqlClient.sni/\">https://www.nuget.org/packages/runtime.win-x64.runtime.native.System.Data.SqlClient.sni/</a><br /><a href=\"https://www.nuget.org/packages/runtime.win-x86.runtime.native.System.Data.SqlClient.sni/\">https://www.nuget.org/packages/runtime.win-x86.runtime.native.System.Data.SqlClient.sni/</a></p>\n<br /><br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-08T16:10:25",
            "node": {
                "id": 190689,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"2574597\" href=\"/answers/users/2574597/naominnn.html\">@NaomiNNN</a></p>\n<p>I made a copy of my comment into an answer and hopefully this will get you on the right path.</p>\n<p>Check out <a href=\"https://github.com/karenpayneoregon/code-samples-csharp/tree/master/CopyFileWhenDone\">the following code sample</a> which I just created. Key code is here. The idea is to simulate copying from code other than yours and your code checking if the copy process has completed.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-08T13:46:03.183",
            "node": {
                "id": 190653,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"2574597\" href=\"/answers/users/2574597/naominnn.html\">@NaomiNNN</a> </p>\n<p>Check out the <a href=\"https://github.com/karenpayneoregon/code-samples-csharp/tree/master/CopyFileWhenDone\">following code sample</a> which I just created. Key code is <a href=\"https://github.com/karenpayneoregon/code-samples-csharp/blob/master/CopyFileWhenDone/Classes/FileHelper.cs\">here</a>. The idea is to simulate copying from code other than yours and your code checking if the copy process has completed.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-08T01:43:29.927",
            "node": {
                "id": 189723,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"2574597\" href=\"/answers/users/2574597/naominnn.html\">@NaomiNNN</a> </p>\n<p>Have you considered using a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=net-5.0\">FileSystemWatcher</a> where you can setup filtering and subscribe to <strong>OnChanged</strong> event along with others.</p>\n<p>Here is a basic example which has more than needed</p>\n<p><a href=\"https://github.com/karenpayneoregon/SystemTrayExamples/tree/master/FileSystemWatcher1\">Source project</a><br />.</p>\n<pre><code> using System;\n using System.Collections.Generic;\n using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n    \n namespace FileSystemWatcher1\n {\n     public class WatchOperations : IDisposable\n     {\n         private string _folderName;\n         public readonly FileSystemWatcher FileSystemWatcher;\n    \n         /// &lt;summary&gt;\n         /// Enable FileSystemWatcher to monitor folder\n         /// &lt;/summary&gt;\n         public void EnableWatch() =&gt; FileSystemWatcher.EnableRaisingEvents = true;\n         /// &lt;summary&gt;\n         /// Disable FileSystemWatcher from monitor folder\n         /// &lt;/summary&gt;\n         public void DisableWatch() =&gt; FileSystemWatcher.EnableRaisingEvents = false;\n    \n         /// &lt;summary&gt;\n         /// Create a instance of FileSystemWatcher with filters\n         /// and events to react to file operations in path pasted in\n         /// to this constructor.\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;path&#34;&gt;Directory to monitor&lt;/param&gt;\n         /// &lt;param name=&#34;filter&#34;&gt;File type defaults to .txt (text files)&lt;/param&gt;\n         public WatchOperations(string path, string filter = &#34;*.txt&#34;)\n         {\n             _folderName = path;\n    \n             FileSystemWatcher = new FileSystemWatcher(path)\n             {\n                 Filter = filter,\n                 NotifyFilter =   NotifyFilters.LastAccess\n                                | NotifyFilters.LastWrite\n                                | NotifyFilters.FileName\n                                | NotifyFilters.DirectoryName\n                    \n             };\n    \n             FileSystemWatcher.Changed += OnChanged;\n             FileSystemWatcher.Created += OnCreated;\n             FileSystemWatcher.Renamed += OnRenamed;\n    \n         }\n         /// &lt;summary&gt;\n         /// Constructor to permit setting up as a private form or\n         /// class level property or variable\n         /// &lt;/summary&gt;\n         public WatchOperations()\n         {\n             FileSystemWatcher = new FileSystemWatcher();\n         }\n         /// &lt;summary&gt;\n         /// Fired when a file is renamed\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n         /// &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n         private void OnRenamed(object sender, RenamedEventArgs e)\n         {\n             Console.WriteLine($@&#34;Rename: {e.OldName}, {e.Name}&#34;);\n         }\n         /// &lt;summary&gt;\n         /// Fired when a file is created\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n         /// &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n         private void OnCreated(object sender, FileSystemEventArgs e)\n         {\n             Console.WriteLine($@&#34;Created: {e.Name}&#34;);\n         }\n    \n         private void OnChanged(object sender, FileSystemEventArgs e)\n         {\n             Console.WriteLine($@&#34;Changed: {e.Name}&#34;);\n         }\n         /// &lt;summary&gt;\n         /// Destroy watcher which stops any watches\n         /// &lt;/summary&gt;\n         public void Dispose()\n         {\n             FileSystemWatcher?.Dispose();\n         }\n     }\n }\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-08T01:25:46.33"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-08T01:25:32.267",
            "node": {
                "id": 189723,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"2574597\" href=\"/answers/users/2574597/naominnn.html\">@NaomiNNN</a> </p>\n<p>Have you considered using a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=net-5.0\">FileSystemWatcher</a> where you can setup filtering and subscribe to <strong>OnChanged</strong> event along with others.</p>\n<p>Here is a basic example which has more than needed</p>\n<p><a href=\"https://github.com/karenpayneoregon/SystemTrayExamples/tree/master/FileSystemWatcher1\">Source project</a><br />.</p>\n<pre><code> using System;\n using System.Collections.Generic;\n using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n    \n namespace FileSystemWatcher1\n {\n     public class WatchOperations : IDisposable\n     {\n         private string _folderName;\n         public readonly FileSystemWatcher FileSystemWatcher;\n    \n         /// &lt;summary&gt;\n         /// Enable FileSystemWatcher to monitor folder\n         /// &lt;/summary&gt;\n         public void EnableWatch() =&gt; FileSystemWatcher.EnableRaisingEvents = true;\n         /// &lt;summary&gt;\n         /// Disable FileSystemWatcher from monitor folder\n         /// &lt;/summary&gt;\n         public void DisableWatch() =&gt; FileSystemWatcher.EnableRaisingEvents = false;\n    \n         /// &lt;summary&gt;\n         /// Create a instance of FileSystemWatcher with filters\n         /// and events to react to file operations in path pasted in\n         /// to this constructor.\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;path&#34;&gt;Directory to monitor&lt;/param&gt;\n         /// &lt;param name=&#34;filter&#34;&gt;File type defaults to .txt (text files)&lt;/param&gt;\n         public WatchOperations(string path, string filter = &#34;*.txt&#34;)\n         {\n             _folderName = path;\n    \n             FileSystemWatcher = new FileSystemWatcher(path)\n             {\n                 Filter = filter,\n                 NotifyFilter =   NotifyFilters.LastAccess\n                                | NotifyFilters.LastWrite\n                                | NotifyFilters.FileName\n                                | NotifyFilters.DirectoryName\n                    \n             };\n    \n             FileSystemWatcher.Changed += OnChanged;\n             FileSystemWatcher.Created += OnCreated;\n             FileSystemWatcher.Renamed += OnRenamed;\n    \n         }\n         /// &lt;summary&gt;\n         /// Constructor to permit setting up as a private form or\n         /// class level property or variable\n         /// &lt;/summary&gt;\n         public WatchOperations()\n         {\n             FileSystemWatcher = new FileSystemWatcher();\n         }\n         /// &lt;summary&gt;\n         /// Fired when a file is renamed\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n         /// &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n         private void OnRenamed(object sender, RenamedEventArgs e)\n         {\n             Console.WriteLine($@&#34;Rename: {e.OldName}, {e.Name}&#34;);\n         }\n         /// &lt;summary&gt;\n         /// Fired when a file is created\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n         /// &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n         private void OnCreated(object sender, FileSystemEventArgs e)\n         {\n             Console.WriteLine($@&#34;Created: {e.Name}&#34;);\n         }\n    \n         private void OnChanged(object sender, FileSystemEventArgs e)\n         {\n             Console.WriteLine($@&#34;Changed: {e.Name}&#34;);\n         }\n         /// &lt;summary&gt;\n         /// Destroy watcher which stops any watches\n         /// &lt;/summary&gt;\n         public void Dispose()\n         {\n             FileSystemWatcher?.Dispose();\n         }\n     }\n }\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-07T18:47:03.733",
            "node": {
                "id": 189411,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4931241\" href=\"/answers/users/4931241/fred-6241.html\">@fred-6241</a> </p>\n<p>Have you tried working with <a href=\"https://docs.microsoft.com/en-us/visualstudio/xaml-tools/creating-a-ui-by-using-blend-for-visual-studio?view=vs-2019\">Blend</a>.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-07T18:43:18.267",
            "node": {
                "id": 189303,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"2945245\" href=\"/answers/users/2945245/saga-3468.html\">@Saga-3468</a></p>\n<p>Have you check your <a href=\"https://support.google.com/accounts/answer/6010255?hl=en\">less secure app settings</a>?</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-07T15:37:14.177"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-07T15:37:03.743",
            "node": {
                "id": 189104,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4815315\" href=\"/answers/users/4815315/venkataprasadpinapathruni-6132.html\">@VenkataPrasadPinapathruni-6132</a> </p>\n<p>You can create wrappers for stored procedures (one way is using EF Core Power tools). In the following example I used a stored procedure with joins but the same works without joins. <a href=\"https://github.com/karenpayneoregon/csharp-features/tree/master/EntityFrameworkCoreStoredProcedures\">Full source</a>.</p>\n<pre><code> CREATE PROCEDURE [dbo].[uspCustomersByCountryIdentifier](@CountryIdentifier int)\n AS\n BEGIN\n SELECT        Cust.CustomerIdentifier, Cust.CompanyName, Cust.ContactId, CT.ContactTitle, C.FirstName, C.LastName, Cust.Street, Cust.City, Cust.Region, Cust.PostalCode, Cust.Phone, Cust.ContactTypeIdentifier, Cust.ModifiedDate, \n                          Cust.CountryIdentifier, CO.Name\n FROM            Customers AS Cust INNER JOIN\n                          Contacts AS C ON Cust.ContactId = C.ContactId INNER JOIN\n                          ContactType AS CT ON Cust.ContactTypeIdentifier = CT.ContactTypeIdentifier AND C.ContactTypeIdentifier = CT.ContactTypeIdentifier INNER JOIN\n                          Countries AS CO ON Cust.CountryIdentifier = CO.CountryIdentifier\n WHERE        Cust.CountryIdentifier = @CountryIdentifier\n END\n</code></pre>\n<br /><p>This <a href=\"https://github.com/karenpayneoregon/csharp-features/blob/master/EntityFrameworkCoreStoredProcedures/Models/uspCustomersByCountryIdentifierResult.cs\">class</a> is used for returning data which uses a <a href=\"https://github.com/karenpayneoregon/csharp-features/blob/master/EntityFrameworkCoreStoredProcedures/Context/StoredProcedures.cs#L44\">wrapper</a> to get only first names as a list of string. </p>\n<p>The following gets first names</p>\n<pre><code> await using var context = new NorthwindContext();\n var storedProcedures = new StoredProcedures(context);\n var results = await storedProcedures.CustomersByCountryIdentifier(12);\n</code></pre>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-06T12:52:34.29"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-06T12:52:10.477",
            "node": {
                "id": 187769,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"608402\" href=\"/answers/users/608402/darrenrose-5103.html\">@DarrenRose-5103</a> </p>\n<p>Another option is using a class which inherits Stack</p>\n<pre><code> Public Class FixedSizeStack\n     Inherits Stack\n    \n     Private MaxNumber As Integer\n     Public Sub New(Limit As Integer)\n         MaxNumber = Limit\n     End Sub\n    \n     Public Overrides Sub Push(obj As Object)\n         If Count &lt; MaxNumber Then\n             MyBase.Push(obj)\n         End If\n     End Sub\n End Class\n</code></pre>\n<br /><p>Full example using integer then string and kept it simple.</p>\n<pre><code> Module Module1\n    \n     Sub Main()\n         Dim originalColor = Console.ForegroundColor\n    \n         Dim StackData1 As New FixedSizeStack(5)\n    \n         Console.ForegroundColor = ConsoleColor.White\n         Console.WriteLine(&#34;Adding&#34;)\n         Console.ForegroundColor = originalColor\n         For index As Integer = 0 To 9\n             StackData1.Push(index + 1)\n         Next index\n    \n         Console.WriteLine()\n    \n    \n         Console.ForegroundColor = ConsoleColor.White\n         Console.WriteLine(&#34;Items in StackData&#34;)\n         Console.ForegroundColor = originalColor\n    \n         Dim results = StackData1.OfType(Of Integer)().OrderBy(Function(x) x).ToList()\n         For Each result As Integer In results\n             Console.WriteLine(result)\n         Next\n    \n         Dim StackData2 As New FixedSizeStack(3)\n         StackData2.Push(&#34;A&#34;)\n         StackData2.Push(&#34;B&#34;)\n         StackData2.Push(&#34;C&#34;)\n         StackData2.Push(&#34;D&#34;)\n         StackData2.Push(&#34;E&#34;)\n         StackData2.Push(&#34;F&#34;)\n         StackData2.Push(&#34;G&#34;)\n    \n    \n         Console.WriteLine()\n         Console.ForegroundColor = ConsoleColor.White\n         Console.WriteLine(&#34;Items in StackData2&#34;)\n         Console.ForegroundColor = originalColor\n    \n         Dim results1 = StackData2.OfType(Of String).Reverse().ToList()\n    \n         For Each result As String In results1\n             Console.WriteLine(result)\n         Next\n    \n         Console.ReadLine()\n    \n     End Sub\n    \n End Module\n Public Class FixedSizeStack\n     Inherits Stack\n    \n     Private MaxNumber As Integer\n     Public Sub New(Limit As Integer)\n         MaxNumber = Limit\n     End Sub\n    \n     Public Overrides Sub Push(obj As Object)\n         If Count &lt; MaxNumber Then\n             MyBase.Push(obj)\n         End If\n     End Sub\n End Class\n</code></pre>\n<p><img src=\"/answers/storage/attachments/45410-b1.png\" alt=\"45410-b1.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-06T12:22:58.527",
            "node": {
                "id": 187828,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4782421\" href=\"/answers/users/4782421/hobbyistprogrammer-7674.html\">@Hobbyist</a><br />No worries in regards to not being able to mark more than one answer as this is not about us but about delivering possible solutions and you picking what fits best for you. Any ways good to hear you have a solution :-) <br /></p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-06T12:13:00.16"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-06T12:12:54.35",
            "node": {
                "id": 187911,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4917917\" href=\"/answers/users/4917917/muhammadahmed-5490.html\">@MuhammadAhmed-5490</a> </p>\n<p>The best path is to deserialize to a list which allows you to have better control such as using a for/next or the ability to use linq to find information. Below shows using a class to read the data while the other uses a slight variation of what you presented. If these do not work for you let me know why/</p>\n<p>Example using Newtonsoft.Json</p>\n<p>Json (with minimal information)</p>\n<pre><code> [\n     {\n         &#34;id&#34;: 1,\n         &#34;customerId&#34;: 100\n     },\n     {\n         &#34;id&#34;: 2,\n         &#34;customerId&#34;: 234\n     },\n     {\n         &#34;id&#34;: 3,\n         &#34;customerId&#34;: 300\n     },\n     {\n         &#34;id&#34;: 4,\n         &#34;customerId&#34;: 234\n     }\n ]\n</code></pre>\n<br /><p>Class to contain above data.</p>\n<pre><code> public class Order\n {\n     public int id { get; set; }\n     public int customerId { get; set; }\n }\n</code></pre>\n<br /><p>Deserialize</p>\n<pre><code> using System;\n using System.Collections.Generic;\n using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using JsonSampleLibrary.Classes;\n using Newtonsoft.Json;\n    \n namespace JsonSampleLibrary\n {\n     public class DynamicOperations\n     {\n         public static List&lt;Order&gt; ReadOrdersStrongTyped(string fileName)\n         {\n             return JsonConvert.DeserializeObject&lt;List&lt;Order&gt;&gt;(File.ReadAllText(fileName));\n         }\n     }\n }\n</code></pre>\n<p>Work with the deserialized data first traversing all then using lambda to get orders for a specific customer.</p>\n<pre><code> var ordersList = DynamicOperations.ReadOrdersStrongTyped(&#34;orders.json&#34;);\n    \n for (int index = 0; index &lt; ordersList.Count; index++)\n {\n     Console.WriteLine(ordersList[index].id);\n }\n    \n Console.WriteLine();\n    \n var id = 234;\n    \n var specificOrder = ordersList.Where(order =&gt; order.customerId == id).ToList();\n    \n for (int index = 0; index &lt; specificOrder.Count(); index++)\n {\n     Console.WriteLine(specificOrder[index].id);\n }\n</code></pre>\n<p>Then the other way is with no class similar to what you have.</p>\n<pre><code> using System;\n using System.Collections.Generic;\n using System.IO;\n using System.Linq;\n using System.Text;\n using System.Threading.Tasks;\n using JsonSampleLibrary.Classes;\n using Newtonsoft.Json;\n    \n namespace JsonSampleLibrary\n {\n     public class DynamicOperations\n     {\n         public static void ReadOrders1(string fileName)\n         {\n             var jsonString = File.ReadAllText(fileName);\n             var objects = JsonConvert.DeserializeObject&lt;dynamic&gt;(jsonString);\n             foreach (var o in objects)\n             {\n                 Console.WriteLine($&#34;{o.id}&#34;);\n             }\n         }\n    \n     }\n }\n</code></pre>\n<p>In the above o.id is known as an integer e.g. testing the type</p>\n<pre><code> foreach (var o in objects)\n {\n     JValue id = o.id;\n     Console.WriteLine($&#34;{id.Type}&#34;);\n }\n</code></pre>\n<br /><p>And typing id column</p>\n<pre><code> public static void ReadOrders1A(string fileName)\n {\n     var jsonString = File.ReadAllText(fileName);\n     var objects = JsonConvert.DeserializeObject&lt;dynamic&gt;(jsonString);\n     List&lt;int&gt; identifiers = new List&lt;int&gt;();\n     foreach (var o in objects)\n     {\n         identifiers.Add(Convert.ToInt32(o.id));\n     }\n }\n</code></pre>\n<br /><br /><br /><br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-05T23:36:34.46"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-05T23:36:21.587",
            "node": {
                "id": 187764,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4913799\" href=\"/answers/users/4913799/oblink19-4721.html\">@OBLINK19-4721</a> ,</p>\n<p>To obtain any Microsoft project key you need to sign into the site below. If you don&#39;t have a paid product then there will be no product key(s).</p>\n<p><a href=\"https://my.visualstudio.com/ProductKeys\">https://my.visualstudio.com/ProductKeys</a></p>\n<p>Click on &#34;Product Keys&#34;</p>\n<p><img src=\"/answers/storage/attachments/45444-b1.png\" alt=\"45444-b1.png\" /></p>\n<p><img src=\"/answers/storage/attachments/45461-b2.png\" alt=\"45461-b2.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-05T23:29:00.03"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-05T23:28:52.447",
            "node": {
                "id": 187610,
                "title": null,
                "body": "<p>Hello,</p>\n<p>A better idea is to not connect directly to the database but instead use restful api that works with json data that can be deserialized to a instance of a class/model. The Xamarin platform ships with support for JSON out of the box.</p>\n<p>Here is a good place to start learning how to interact via rest service/api<br /><a href=\"https://docs.microsoft.com/en-us/xamarin/cross-platform/data-cloud/web-services/\">https://docs.microsoft.com/en-us/xamarin/cross-platform/data-cloud/web-services/</a></p>\n<p>Bottom line is to do EF work on a server, not on a cross platform project so the EF work is alway from the client side code.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-05T22:14:37.66",
            "node": {
                "id": 187633,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4782421\" href=\"/answers/users/4782421/hobbyistprogrammer-7674.html\">@Hobbyistprogrammer-7674</a> </p>\n<p>DataGridView columns are created in the designer, nothing special other than the first column is read-only. I use reflection to set cell values from properties. Since I didn&#39;t want to disturb first code sample I left the Id property in and filtered it out for the PropertyInfo code in form load.</p>\n<pre><code> Imports System.Reflection\n Public Class Form2\n     Private peopleBindingSource As New BindingSource()\n     Private Sub Form2_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n    \n         Dim person = New Person() With {.Id = 1, .FirstName = &#34;Karen&#34;, .LastName = &#34;Payne&#34;}\n    \n         peopleBindingSource.DataSource = New List(Of Person) From {person}\n    \n         Dim properties = GetType(Person).\n                 GetProperties().\n                 Where(\n                     Function(propertyInfo)\n                         Return propertyInfo.PropertyType IsNot GetType(Integer)\n                     End Function)\n    \n         For Each propertyInfo As PropertyInfo In properties\n             DataGridView1.Rows.Add(propertyInfo.Name,\n                                    propertyInfo.GetValue(person),\n                                    propertyInfo.Name)\n         Next\n    \n         AddHandler DataGridView1.CellValueChanged, AddressOf CellChanged\n     End Sub\n     Private Sub CellChanged(sender As Object, e As DataGridViewCellEventArgs)\n         Dim item = CType(peopleBindingSource.Current, Person)\n    \n         If e.RowIndex = 0 Then\n             item.FirstName = DataGridView1.Rows(e.RowIndex).Cells(1).Value.ToString()\n         Else\n             item.LastName = DataGridView1.Rows(e.RowIndex).Cells(1).Value.ToString()\n         End If\n    \n     End Sub\n     Private Sub PersonValues_Click(sender As Object, e As EventArgs) Handles Button1.Click\n         Dim person = CType(peopleBindingSource.Current, Person)\n    \n         MessageBox.Show($&#34;{person.FirstName} {person.LastName}&#34;)\n    \n     End Sub\n End Class\n</code></pre>\n<br /><br /><p><img src=\"/answers/storage/attachments/45290-b1.png\" alt=\"45290-b1.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-05T21:24:44.703",
            "node": {
                "id": 187645,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4534393\" href=\"/answers/users/4534393/robinj-0104.html\">@RobinJ-0104</a> </p>\n<p>The signature for WriteAllText is, first parameter is the path and filename while the second is for the string contain information to write to parameter 1.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.file.writealltext?view=net-5.0#System_IO_File_WriteAllText_System_String_System_String_\">public static void WriteAllText (string path, string? contents)</a>;</p>\n<br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-05T15:03:30.287",
            "node": {
                "id": 187433,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4913059\" href=\"/answers/users/4913059/marcodelloca-1606.html\">@MarcoDellOca-1606</a>,</p>\n<p>This is one idea to loop through lines in the file (assuming you are reading lines in a file) </p>\n<pre><code>     var fileName = &#34;TextFile1.txt&#34;;\n    \n     if (!File.Exists(fileName))\n     {\n         return;\n     }\n    \n     var counter = 0;\n    \n     string line;\n    \n     using (var file = new StreamReader(&#34;TextFile1.txt&#34;))\n     {\n         while ((line = file.ReadLine()) != null)\n         {\n    \n             counter++;\n    \n             if (!line.Contains(&#34;\\&#34;&#34;)) continue;\n             var result = line\n                 .Select((value, index) =&gt; new { item = value, position = index })\n                 .Where(item =&gt; item.item == &#39;\\&#34;&#39;)\n                 .ToList();\n    \n             if (result.Count &lt;= 0) continue;\n             {\n                 Console.WriteLine($&#34;{line}&#34;);\n                 foreach (var item in result)\n                 {\n                     Console.WriteLine(item.position);\n                 }\n             }\n         }\n           \n     }\n</code></pre>\n<br /><p>Text file with sample data</p>\n<pre><code> Karen Payne\n Jim Jones\n Bob &#34;Adams Frank&#34;\n Bill Smith\n &#34;Jane anne&#34;\n</code></pre>\n<br /><p>Output</p>\n<pre><code> Bob &#34;Adams Frank&#34;\n 4\n 16\n &#34;Jane anne&#34;\n 0\n 10\n</code></pre>\n<br /><br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-05T15:03:25.067"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-05T12:27:15.517"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-05T12:26:34.16"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-05T12:26:28.013",
            "node": {
                "id": 187385,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4534393\" href=\"/answers/users/4534393/robinj-0104.html\">@RobinJ-0104</a> </p>\n<p>If using C# 9 there is the <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression\">switch expression</a>, you can also use the following which you supply logic for each condition.</p>\n<pre><code> public static class Example\n {\n     public static bool Demo(int item, string folder) =&gt; item switch\n     {\n         1 =&gt; Operations.DoSomething1(folder),\n         2 =&gt; Operations.DoSomething2(folder),\n         _ =&gt; Operations.DefaultSwitch()\n     };\n }\n    \n public class Operations\n {\n     public static bool DoSomething1(string folder)\n     {\n         if (Directory.Exists(folder))\n         {\n             return true;\n         }\n         else\n         {\n             Directory.CreateDirectory(folder);\n             return false;\n         }\n     }\n     public static bool DoSomething2(string folder) =&gt; /* do whatever*/ true;\n    \n     public static bool DefaultSwitch() =&gt; false;\n }\n</code></pre>\n<br /><br /><p>Here is a tad more robust example that shows returning a List with source in <a href=\"https://github.com/karenpayneoregon/csharp-features/blob/master/RecursivePatterns/Classes/LanguageExtensions.cs\">the following repository</a>.</p>\n<pre><code> public static List&lt;Employee&gt; GetEmployeesWhereManagerHasYearsAsManager(this Person person) =&gt; person switch\n {\n     Manager { YearsAsManager: &gt;=4 } manager =&gt; manager.Employees,\n     Manager { YearsAsManager: 3 } manager =&gt; manager.Employees,\n     _ =&gt; null\n };\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-05T10:39:41.337"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-05T10:39:18.847",
            "node": {
                "id": 187370,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4782421\" href=\"/answers/users/4782421/hobbyistprogrammer-7674.html\">@Hobbyistprogrammer-7674</a> </p>\n<p>For your requirements, implement <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.inotifypropertychanged?view=net-5.0\">INotifyPropertyChanged</a> Interface for allowing immediate updates to the user interface. If we were to simply set the list (in this case of Person) to the DataGridView it would seem we are done although there is no sorting so a custom BindingList (<a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/blob/master/ClassBindingToDataGridViewSorted/Classes/SortableBindingList.vb\">found here</a>) is needed and on top of this a BindingSource to tie things together.</p>\n<p>You can copy code below or copy the full code including the custom BindingList from <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/ClassBindingToDataGridViewSorted\">the following GitHub repository</a>.</p>\n<p>Here is the Person class which implements INotifyPropertyChanged.</p>\n<pre><code> Imports System.ComponentModel\n Imports System.Runtime.CompilerServices\n    \n Public Class Person\n     Implements INotifyPropertyChanged\n    \n     Public Property Id() As Integer\n     Public Property FirstName() As String\n     Public Property LastName() As String\n    \n     Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\n     Protected Overridable Sub OnPropertyChanged(&lt;CallerMemberName&gt; Optional ByVal propertyName As String = Nothing)\n         PropertyChangedEvent?.Invoke(Me, New PropertyChangedEventArgs(propertyName))\n     End Sub\n End Class\n</code></pre>\n<br /><p>And a class for some mocked up data.</p>\n<pre><code> Public Class Mocked\n     Public Shared ReadOnly Property PeopleList() As List(Of Person)\n         Get\n             Return New List(Of Person) From {\n                 New Person() With {.Id = 1, .FirstName = &#34;Karen&#34;, .LastName = &#34;Payne&#34;},\n                 New Person() With {.Id = 2, .FirstName = &#34;Bill&#34;, .LastName = &#34;Smith&#34;},\n                 New Person() With {.Id = 3, .FirstName = &#34;Mary&#34;, .LastName = &#34;Jones&#34;},\n                 New Person() With {.Id = 4, .FirstName = &#34;Kim&#34;, .LastName = &#34;Adams&#34;}}\n         End Get\n     End Property\n End Class\n</code></pre>\n<br /><br /><p>Form code for displaying, minimal editing and a mocked up add new Person.</p>\n<pre><code> Public Class Form1\n    \n     Private peopleBindingList As SortableBindingList(Of Person)\n     Private peopleBindingSource As New BindingSource()\n    \n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n         peopleBindingList = New SortableBindingList(Of Person)(Mocked.PeopleList)\n         peopleBindingSource.DataSource = peopleBindingList\n    \n         dataGridView1.DataSource = peopleBindingSource\n         dataGridView1.Columns(&#34;id&#34;).Visible = False\n     End Sub\n    \n     Private Sub CurrentPersonButton_Click(sender As Object, e As EventArgs) _\n         Handles CurrentPersonButton.Click\n    \n         If peopleBindingSource.Current Is Nothing Then\n             Return\n         End If\n    \n         Dim currentPerson = peopleBindingList(peopleBindingSource.Position)\n         MessageBox.Show($&#34;{currentPerson.Id}, {currentPerson.FirstName}, {currentPerson.LastName}&#34;)\n    \n     End Sub\n    \n     Private Sub NewPersonButton_Click(sender As Object, e As EventArgs) Handles NewPersonButton.Click\n    \n         peopleBindingList.Add(New Person() With\n             {\n                 .Id = peopleBindingList.Select(Function(p) p.Id).Max() + 1,\n                 .FirstName = &#34;Jude&#34;,\n                 .LastName = &#34;Lennon&#34;\n             })\n    \n     End Sub\n End Class\n</code></pre>\n<p>Screen shot</p>\n<p><img src=\"/answers/storage/attachments/45355-1111.png\" alt=\"45355-1111.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:21:16.167"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:21:03.02"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:20:58.317"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:19:41.713"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:19:36.82"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:19:32.777"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:19:16.35"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T21:19:05.28"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T18:37:33.85"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-04T18:37:20.577",
            "node": {
                "id": 186940,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4897989\" href=\"/answers/users/4897989/omkarpimplekar-4983.html\">@OmkarPimplekar-4983</a> </p>\n<p>Here is one option using <a href=\"https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.threading.tplextensions.forget?view=visualstudiosdk-2017\">ForGet</a>, which requires the following <a href=\"https://www.nuget.org/packages/Microsoft.VisualStudio.Threading/\">NuGet package</a>.</p>\n<pre><code> public static async Task&lt;bool&gt; SomeTask()\n {\n     return await Task.Run(async () =&gt;\n     {\n         await Task.Delay(2000);\n         Console.WriteLine(&#34;hello&#34;);\n         return true;\n     });\n    \n }\n</code></pre>\n<br /><p>Usage</p>\n<pre><code> Console.WriteLine(&#34;Before&#34;);\n SomeTask().Forget();\n Console.WriteLine(&#34;After&#34;);\n</code></pre>\n<br /><br /><p>Results where hello shows up after &#34;after&#34;. Now there is a caveat, if code can fail make sure that the calling method wraps the code in a try/catch and that the calling method is not marked as void else the exception is not bubbled up to the caller.</p>\n<pre><code> Before\n After\n hello\n</code></pre>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-04T13:01:36.263",
            "node": {
                "id": 186764,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> </p>\n<p>When working with a DataGridView the best option is to set the DataSource be it a DataTable or a List(Of T).  About the only time to not use a DataSource is for viewing information/data where information/data will not be modified.</p>\n<p>For example, using a DataTable subscribe to the RowDeleted event and in this event reorder the primary key.</p>\n<p>Here the primary key is read-only so when reordering I set the ReadOnly property to false so the values can be set then change the ReadOnly to True again</p>\n<p>Here I delete the row with Joe and then reorder the primary key.</p>\n<p><img src=\"/answers/storage/attachments/45139-1111.png\" alt=\"45139-1111.png\" /></p>\n<pre><code> Public Class Form1\n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n         Dim dt = GetData()\n    \n         AddHandler dt.RowDeleted, AddressOf RowDeleted\n         DataGridView1.DataSource = dt\n    \n     End Sub\n\n     Private Sub RowDeleted(sender As Object, e As DataRowChangeEventArgs)\n    \n         Dim dt = CType(sender, DataTable)\n    \n         If dt.Rows.Count &gt; 0 Then\n    \n             dt.Columns(0).ReadOnly = False\n    \n             For index As Integer = 0 To dt.Rows.Count - 1\n                 dt.Rows(index).SetField(Of Integer)(&#34;Id&#34;, index + 1)\n             Next\n    \n             dt.Columns(0).ReadOnly = True\n    \n         End If\n    \n     End Sub\n End Class\n Public Module Mocked\n     Public Function GetData() As DataTable\n         Dim dt As New DataTable\n    \n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Id&#34;, .DataType = GetType(Integer),\n                           .AutoIncrement = True, .AutoIncrementSeed = 1})\n    \n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Name&#34;, .DataType = GetType(String)})\n    \n         dt.Rows.Add(New Object() {Nothing, &#34;Karen&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Jim&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Joe&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Bob&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Mary&#34;})\n    \n         Return dt\n    \n     End Function\n End Module\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-04T12:49:50.623"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-04T12:49:03.553",
            "node": {
                "id": 186764,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> </p>\n<p>When working with a DataGridView the best option is to set the DataSource be it a DataTable or a List(Of T).  About the only time to not use a DataSource is for viewing information/data where information/data will not be modified.</p>\n<p>For example, using a DataTable subscribe to the RowDeleted event and in this event reorder the primary key.</p>\n<p>Here the primary key is read-only so when reordering I set the ReadOnly property to false so the values can be set then change the ReadOnly to True again</p>\n<p>Here I delete the row with Joe and then reorder the primary key.</p>\n<p><img src=\"/answers/storage/attachments/45139-1111.png\" alt=\"45139-1111.png\" /></p>\n<pre><code> Public Class Form1\n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n         Dim dt = GetData()\n    \n         AddHandler dt.RowDeleted, AddressOf RowDeleted\n         DataGridView1.DataSource = dt\n    \n     End Sub\n\n     Private Sub RowDeleted(sender As Object, e As DataRowChangeEventArgs)\n    \n         Dim dt = CType(sender, DataTable)\n    \n         If dt.Rows.Count &gt; 0 Then\n    \n             dt.Columns(0).ReadOnly = False\n    \n             For index As Integer = 0 To dt.Rows.Count - 1\n                 dt.Rows(index).SetField(Of Integer)(&#34;Id&#34;, index + 1)\n             Next\n    \n             dt.Columns(0).ReadOnly = True\n    \n         End If\n    \n     End Sub\n End Class\n Public Module Mocked\n     Public Function GetData() As DataTable\n         Dim dt As New DataTable\n    \n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Id&#34;, .DataType = GetType(Integer),\n                           .AutoIncrement = True, .AutoIncrementSeed = 1})\n    \n         dt.Columns.Add(New DataColumn() With {.ColumnName = &#34;Name&#34;, .DataType = GetType(String)})\n    \n         dt.Rows.Add(New Object() {Nothing, &#34;Karen&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Jim&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Joe&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Bob&#34;})\n         dt.Rows.Add(New Object() {Nothing, &#34;Mary&#34;})\n    \n         Return dt\n    \n     End Function\n End Module\n</code></pre>\n<br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-03T22:28:50.683",
            "node": {
                "id": 185548,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"2945245\" href=\"/answers/users/2945245/saga-3468.html\">@Saga-3468</a>,</p>\n<p>If you want both controls to be independent when traversing. You need to clone the list.</p>\n<p>Add this class to your project.</p>\n<pre><code> static class Extensions\n {\n     public static IList&lt;T&gt; Clone&lt;T&gt;(this IList&lt;T&gt; listToClone) where T : ICloneable =&gt; \n         listToClone.Select(item =&gt; (T)item.Clone()).ToList();\n }\n</code></pre>\n<br /><br /><p>Then to populate the controls.</p>\n<pre><code> var firstNamesList = new List&lt;string&gt; { &#34;Karen&#34;, &#34;Jane&#34;, &#34;Mike&#34; };\n listBox1.DataSource = firstNamesList;\n comboBox1.DataSource = firstNamesList.Clone();\n</code></pre>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-03T20:44:56.363"
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-03T20:44:29.6",
            "node": {
                "id": 185519,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> your very welcome, happy to assist you.</p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "voted",
            "actionDate": "2020-12-03T20:43:52.39",
            "node": {
                "id": 185533,
                "title": null,
                "body": "<p>Thank you so much! That was right answer, and everything works great!</p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-03T19:59:18.567",
            "node": {
                "id": 185476,
                "title": null,
                "body": "<p><a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a> you need to rethink your table structure.</p>\n<p>Example, the following has two decimal columns, in code the Expression column would be created. When doing a calculated column there is zero reasons to store it as it can be computed on the fly.</p>\n<p>Here both Value1 and Value2 are setup as decimal types, as mentioned above the computed column in the DataSet with an Expression is on the fly.<br /><img src=\"/answers/storage/temp/45002-b1.png\" alt=\"45002-b1.png\" /></p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-03T18:42:11.487",
            "node": {
                "id": 185435,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4875772\" href=\"/answers/users/4875772/drgagi-8103.html\">@DRGAGI-8103</a></p>\n<p>In the .xsd file, select the table, add a new column</p>\n<p><img src=\"/answers/storage/attachments/44951-000.png\" alt=\"44951-000.png\" /></p>\n<p>Now setup the Expression for the column just added. In the following UnitPrice column exist in the database table as a decimal, the new column has been setup as a decimal and an Expression as shown. This works when saving as the column is ignored by the database classes.</p>\n<p>Does this make sense?</p>\n<br /><p><img src=\"/answers/storage/attachments/44961-1111.png\" alt=\"44961-1111.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-03T17:55:25.12",
            "node": {
                "id": 185353,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"2201999\" href=\"/answers/users/2201999/gregpipes-0987.html\">@GregPipes-0987</a> </p>\n<p>In regards to option 2, have you looked at <a href=\"https://marketplace.visualstudio.com/items?itemName=VisualStudioClient.MicrosoftVisualStudio2017InstallerProjects\">Visual Studio installer projects</a>? I&#39;ve only used this installer once with 1,000 plus clients with zero issues. In the post build event you can sign with a paid for or non paid for certificate.</p>\n<br />",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-03T13:18:08.817"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-03T13:18:00.357",
            "node": {
                "id": 184909,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4839559\" href=\"/answers/users/4839559/postoncharles-4360.html\">@PostonCharles-4360</a> </p>\n<p>There is no one path for migrating although there are recommendations (<a href=\"https://docs.microsoft.com/en-us/dotnet/core/porting/libraries#develop-a-comprehensive-plan-of-attack\">see develop a plan</a>) and this is not all dependent on .NET 5 Framework. When possible (and this is not .NET 5 specific) use generics for shared libraries you which may currently be doing but if not this is a time to consider both generics and Interfaces. </p>\n<p>On this page information is presented to considerations for piece by piece project migration <a href=\"https://docs.microsoft.com/en-us/dotnet/core/porting/project-structure\">Organize your project to support both .NET Framework and .NET Core</a></p>\n<p>Regarding <em>small or several large libraries</em>, it&#39;s always wise to plan for smaller projects but that is not always possible so that is where planning out namespaces for functionality comes into play which means one can go small or large.</p>\n<p>Then there are considerations will code need to be cross-platform, are there multiple project types e.g. ASP.NET Core, WPF, Windows Forms, xamarin etc. then there is data interactions, going back to project type and platform (where web project types of course are easier in many cases).</p>\n<p>Things to look at for .NET 5 specifically, performance improvements as <a href=\"https://docs.microsoft.com/en-us/dotnet/core/dotnet-five\">laid out here</a> rather than language features per-say. A great way to bench mark is to have current code against migration code using <a href=\"https://github.com/dotnet/benchmarkdotnet\">BenchmarkDotNet</a> coupled with unit test.</p>\n<br /><p>Another consideration is to create on-prem NuGet packages, sticking with the above, keep them small when possible. Microsoft for sometime now has been going small with libraries.</p>\n<p>The above may not provided all possible answers to your question and is not intended to, the intent is for you to have a plan which may change over time while if attempting to follow one path &#34;just because&#34; may lead to frustration and additional hours backtracking to go a different direction.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-02T14:34:52.263",
            "node": {
                "id": 183547,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4867031\" href=\"/answers/users/4867031/mindraruslan-8520.html\">@MIndraRuslan-8520</a> </p>\n<p>The following has a Timer enable, checks to see if an executable is running or not and sets the ProgressBar visible accordingly. The ProgressBar.Style is Marquee in this case. I tested this with an executable running and then stopped then started etc. The executable name is ChunkIncoming.exe residing in the following folder C:\\Dotnetland\\SIDES MPC.</p>\n<p>Of course you can alter the logic in regards to .Visible to set the .Value and keep the ProgressBar visible rather than hide the progress bar.</p>\n<pre><code> Public Class Form1\n     Private Const ExecutablePath As String = &#34;C:\\Dotnetland\\SIDES MPC&#34;\n     Private Const ExecutableBaseName As String = &#34;ChunkIncoming&#34;\n     Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick\n         Dim process() As System.Diagnostics.Process = System.Diagnostics.Process.GetProcessesByName(ExecutableBaseName)\n    \n         If process.FirstOrDefault() Is Nothing Then\n             ProgressBar1.Visible = False\n         Else\n    \n             Dim test = process.FirstOrDefault(Function(p) p.MainModule.FileName.StartsWith(ExecutablePath))\n    \n             If test.HasExited Then\n                 ProgressBar1.Visible = False\n             Else\n                 If Not ProgressBar1.Visible Then\n                     ProgressBar1.Visible = True\n                 End If\n             End If\n    \n         End If\n     End Sub\n End Class\n</code></pre>\n<p>Keep ProgressBar visible, show 100 percent done</p>\n<pre><code> Public Class Form1\n     Private Const ExecutablePath As String = &#34;C:\\OED\\Dotnetland\\SIDES MPC\\Debug&#34;\n     Private Const ExecutableBaseName As String = &#34;ChunkIncomingTextFile&#34;\n     Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick\n         Dim process() As Process = Diagnostics.Process.GetProcessesByName(ExecutableBaseName)\n    \n         If process.FirstOrDefault() Is Nothing Then\n             ProgressBar1.Visible = False\n         Else\n    \n             Dim test = process.FirstOrDefault(Function(p) p.MainModule.FileName.StartsWith(ExecutablePath))\n    \n             If test.HasExited Then\n                 ProgressBar1.Style = ProgressBarStyle.Blocks\n                 ProgressBar1.Value = 100\n                 Timer1.Enabled = False\n             Else\n                 If Not ProgressBar1.Visible Then\n                     ProgressBar1.Visible = True\n                 End If\n             End If\n    \n         End If\n     End Sub\n End Class\n</code></pre>\n",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-02T14:30:20.333"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-02T14:30:08.08",
            "node": {
                "id": 183547,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4867031\" href=\"/answers/users/4867031/mindraruslan-8520.html\">@MIndraRuslan-8520</a> </p>\n<p>The following has a Timer enable, checks to see if an executable is running or not and sets the ProgressBar visible accordingly. The ProgressBar.Style is Marquee in this case. I tested this with an executable running and then stopped then started etc. The executable name is ChunkIncoming.exe residing in the following folder C:\\Dotnetland\\SIDES MPC.</p>\n<p>Of course you can alter the logic in regards to .Visible to set the .Value and keep the ProgressBar visible rather than hide the progress bar.</p>\n<pre><code> Public Class Form1\n     Private Const ExecutablePath As String = &#34;C:\\Dotnetland\\SIDES MPC&#34;\n     Private Const ExecutableBaseName As String = &#34;ChunkIncoming&#34;\n     Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick\n         Dim process() As System.Diagnostics.Process = System.Diagnostics.Process.GetProcessesByName(ExecutableBaseName)\n    \n         If process.FirstOrDefault() Is Nothing Then\n             ProgressBar1.Visible = False\n         Else\n    \n             Dim test = process.FirstOrDefault(Function(p) p.MainModule.FileName.StartsWith(ExecutablePath))\n    \n             If test.HasExited Then\n                 ProgressBar1.Visible = False\n             Else\n                 If Not ProgressBar1.Visible Then\n                     ProgressBar1.Visible = True\n                 End If\n             End If\n    \n         End If\n     End Sub\n End Class\n</code></pre>\n<p>Keep ProgressBar visible, show 100 percent done</p>\n<pre><code> Public Class Form1\n     Private Const ExecutablePath As String = &#34;C:\\OED\\Dotnetland\\SIDES MPC\\Debug&#34;\n     Private Const ExecutableBaseName As String = &#34;ChunkIncomingTextFile&#34;\n     Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick\n         Dim process() As Process = Diagnostics.Process.GetProcessesByName(ExecutableBaseName)\n    \n         If process.FirstOrDefault() Is Nothing Then\n             ProgressBar1.Visible = False\n         Else\n    \n             Dim test = process.FirstOrDefault(Function(p) p.MainModule.FileName.StartsWith(ExecutablePath))\n    \n             If test.HasExited Then\n                 ProgressBar1.Style = ProgressBarStyle.Blocks\n                 ProgressBar1.Value = 100\n                 Timer1.Enabled = False\n             Else\n                 If Not ProgressBar1.Visible Then\n                     ProgressBar1.Visible = True\n                 End If\n             End If\n    \n         End If\n     End Sub\n End Class\n</code></pre>\n",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-02T13:25:55.827",
            "node": {
                "id": 182211,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"1661672\" href=\"/answers/users/1661672/ganichn.html\">@GaniCHN</a> </p>\n<p>Would the following mockup help out? If not tell me why.</p>\n<p>StartMethod is the starting point.</p>\n<pre><code> using System;\n using System.Data;\n using System.Linq;\n    \n namespace YourNamespaceGoesHere.Classes\n {\n     public class Operations\n     {\n         public static void StartMethod()\n         {\n             var dataTable = new DataTable();\n    \n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Id&#34;, DataType = typeof(int),\n                 AutoIncrement = true, AutoIncrementSeed = 1});\n    \n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;FirstName&#34;, DataType = typeof(string)});\n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;LastName&#34;, DataType = typeof(string)});\n    \n             dataTable.Rows.Add(null, &#34;Karen&#34;, &#34;Payne&#34;);\n             dataTable.Rows.Add(null, &#34;Bob&#34;, &#34;Adams&#34;);\n             dataTable.Rows.Add(null, &#34;mary&#34;, &#34;Jones&#34;);\n    \n             ModifyTable(dataTable);\n    \n             ModifyRow(dataTable.Rows.Cast&lt;DataRow&gt;().FirstOrDefault());\n    \n             Console.WriteLine();\n    \n         }\n         /// &lt;summary&gt;\n         /// Mockup for changing a field value for last name\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;dataRow&#34;&gt;Populated DataRow&lt;/param&gt;\n         public static void ModifyRow(DataRow dataRow)\n         {\n             dataRow.SetField(&#34;LastName&#34;, dataRow.Field&lt;string&gt;(&#34;LastName&#34;) + &#34; Changed&#34;);\n         }\n         //\n            \n         /// &lt;summary&gt;\n         /// Modify all first names\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;dataTable&#34;&gt;Populated DataTable&lt;/param&gt;\n         public static void ModifyTable(DataTable dataTable)\n         {\n             for (int index = 0; index &lt; dataTable.Rows.Count; index++)\n             {\n                 dataTable.Rows[index]\n                     .SetField(&#34;FirstName&#34;, \n                         dataTable.Rows[index].Field&lt;string&gt;(&#34;FirstName&#34;)\n                             .ToUpper());\n             }\n         }\n     }\n }\n</code></pre>\n<p><strong>Here is a mockup for adding a new record where values are hard coded</strong>.</p>\n<pre><code> public class Operations\n {\n  public static void StartMethod()\n  {\n  var dataTable = new DataTable();\n    \n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Id&#34;, DataType = typeof(int),\n  AutoIncrement = true, AutoIncrementSeed = 1});\n    \n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;FirstName&#34;, DataType = typeof(string)});\n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;LastName&#34;, DataType = typeof(string)});\n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Salary&#34;, DataType = typeof(decimal)});\n    \n  dataTable.Rows.Add(null, &#34;Karen&#34;, &#34;Payne&#34;, 123.4);\n  dataTable.Rows.Add(null, &#34;Bob&#34;, &#34;Adams&#34;, 456.0);\n  dataTable.Rows.Add(null, &#34;mary&#34;, &#34;Jones&#34;, 7779.0);\n  AddRecord(dataTable);\n  }\n  public static void AddRecord(DataTable dataTable)\n  {\n  var dr = dataTable.NewRow();\n  dataTable.Rows.Add(dr);\n    \n  dr.SetField(&#34;FirstName&#34;,&#34;Mike&#34;);\n  dr.SetField(&#34;LastName&#34;,&#34;Lebow&#34;);\n  dr.SetField(&#34;Salary&#34;,45677);\n  Console.WriteLine();\n  }\n }\n</code></pre>\n<p><img src=\"/answers/storage/attachments/44317-table.png\" alt=\"44317-table.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-02T13:23:35.27",
            "node": {
                "id": 182211,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"1661672\" href=\"/answers/users/1661672/ganichn.html\">@GaniCHN</a> </p>\n<p>Would the following mockup help out? If not tell me why.</p>\n<p>StartMethod is the starting point.</p>\n<pre><code> using System;\n using System.Data;\n using System.Linq;\n    \n namespace YourNamespaceGoesHere.Classes\n {\n     public class Operations\n     {\n         public static void StartMethod()\n         {\n             var dataTable = new DataTable();\n    \n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Id&#34;, DataType = typeof(int),\n                 AutoIncrement = true, AutoIncrementSeed = 1});\n    \n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;FirstName&#34;, DataType = typeof(string)});\n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;LastName&#34;, DataType = typeof(string)});\n    \n             dataTable.Rows.Add(null, &#34;Karen&#34;, &#34;Payne&#34;);\n             dataTable.Rows.Add(null, &#34;Bob&#34;, &#34;Adams&#34;);\n             dataTable.Rows.Add(null, &#34;mary&#34;, &#34;Jones&#34;);\n    \n             ModifyTable(dataTable);\n    \n             ModifyRow(dataTable.Rows.Cast&lt;DataRow&gt;().FirstOrDefault());\n    \n             Console.WriteLine();\n    \n         }\n         /// &lt;summary&gt;\n         /// Mockup for changing a field value for last name\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;dataRow&#34;&gt;Populated DataRow&lt;/param&gt;\n         public static void ModifyRow(DataRow dataRow)\n         {\n             dataRow.SetField(&#34;LastName&#34;, dataRow.Field&lt;string&gt;(&#34;LastName&#34;) + &#34; Changed&#34;);\n         }\n         //\n            \n         /// &lt;summary&gt;\n         /// Modify all first names\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;dataTable&#34;&gt;Populated DataTable&lt;/param&gt;\n         public static void ModifyTable(DataTable dataTable)\n         {\n             for (int index = 0; index &lt; dataTable.Rows.Count; index++)\n             {\n                 dataTable.Rows[index]\n                     .SetField(&#34;FirstName&#34;, \n                         dataTable.Rows[index].Field&lt;string&gt;(&#34;FirstName&#34;)\n                             .ToUpper());\n             }\n         }\n     }\n }\n</code></pre>\n<p><strong>Here is a mockup for adding a new record where values are hard coded</strong>.</p>\n<pre><code> public class Operations\n {\n  public static void StartMethod()\n  {\n  var dataTable = new DataTable();\n    \n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Id&#34;, DataType = typeof(int),\n  AutoIncrement = true, AutoIncrementSeed = 1});\n    \n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;FirstName&#34;, DataType = typeof(string)});\n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;LastName&#34;, DataType = typeof(string)});\n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Salary&#34;, DataType = typeof(decimal)});\n    \n  dataTable.Rows.Add(null, &#34;Karen&#34;, &#34;Payne&#34;, 123.4);\n  dataTable.Rows.Add(null, &#34;Bob&#34;, &#34;Adams&#34;, 456.0);\n  dataTable.Rows.Add(null, &#34;mary&#34;, &#34;Jones&#34;, 7779.0);\n  AddRecord(dataTable);\n  }\n  public static void AddRecord(DataTable dataTable)\n  {\n  var dr = dataTable.NewRow();\n  dataTable.Rows.Add(dr);\n    \n  dr.SetField(&#34;FirstName&#34;,&#34;Mike&#34;);\n  dr.SetField(&#34;LastName&#34;,&#34;Lebow&#34;);\n  dr.SetField(&#34;Salary&#34;,45677);\n  Console.WriteLine();\n  }\n }\n</code></pre>\n<p><img src=\"/answers/storage/attachments/44317-table.png\" alt=\"44317-table.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-02T13:10:17.117"
        },
        {
            "actionType": "edited",
            "actionDate": "2020-12-02T12:12:27.75",
            "node": {
                "id": 183451,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4706261\" href=\"/answers/users/4706261/radimlanger-2441.html\">@RadimLanger-2441</a> </p>\n<p>VS2019 does not have an option to exclude the folder name e.g. if we have a namespace of Blog.Classes creating in the Class folder Operations.cs the namespace will be Blog.Classes.</p>\n<p>If you want Operations.cs in Blog namespace a work-around is to create Operations.cs in the root folder of the project then in solution explorer drag-n-drop the class file into a Blog.Classes.</p>\n<p>So your current idea and the work-around is your choice to make.</p>\n<p>If you have Resharper installed, right click on a folder e.g. Classes, select properties then for Namespace Provider change the value from True to False then the root namespace is used rather than appending the folder name to the namespace.</p>\n",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-02T12:08:36.037",
            "node": {
                "id": 183451,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4706261\" href=\"/answers/users/4706261/radimlanger-2441.html\">@RadimLanger-2441</a> </p>\n<p>VS2019 does not have an option to exclude the folder name e.g. if we have a namespace of Blog.Classes creating in the Class folder Operations.cs the namespace will be Blog.Classes.</p>\n<p>If you want Operations.cs in Blog namespace a work-around is to create Operations.cs in the root folder of the project then in solution explorer drag-n-drop the class file into a Blog.Classes.</p>\n<p>So your current idea and the work-around is your choice to make.</p>\n<p>If you have Resharper installed, right click on a folder e.g. Classes, select properties then for Namespace Provider change the value from True to False then the root namespace is used rather than appending the folder name to the namespace.</p>\n",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-02T12:00:53.57"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-02T12:00:46.403",
            "node": {
                "id": 183355,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4866549\" href=\"/answers/users/4866549/santoshumarani-1390.html\">@SantoshUmarani-1390</a> ,</p>\n<p>The following reads a .zip file, places folders and files into a container which you can inspect. </p>\n<p>Containers for storing files by folder</p>\n<pre><code> using System;\n using System.Collections.Generic;\n    \n namespace ExtractFiles\n {\n     namespace Classes\n     {\n         public class ResultContainer\n         {\n             /// &lt;summary&gt;\n             /// Folder name for files\n             /// &lt;/summary&gt;\n             public string FolderName {get; set;}\n             /// &lt;summary&gt;\n             /// List of files and sizes\n             /// &lt;/summary&gt;\n             public List&lt;FileContainer&gt; List {get; set;} = new List&lt;FileContainer&gt;();\n             public override string ToString()\n             {\n                 return FolderName;\n             }\n         }\n         public class FileContainer\n         {\n             /// &lt;summary&gt;\n             /// File name\n             /// &lt;/summary&gt;\n             public string Name {get; set;}\n             /// &lt;summary&gt;\n             /// File size\n             /// &lt;/summary&gt;\n             public Int64 Size {get; set;}\n             public override string ToString()\n             {\n                 return Name;\n             }\n         }\n     }\n }\n</code></pre>\n<br /><p>Code to read zip into a Dictionary (change the namespace to your namespace)</p>\n<pre><code> using System;\n using System.Collections.Generic;\n using System.IO;\n using System.IO.Compression;\n using System.Linq;\n    \n namespace ExtractFiles.Classes\n {\n     namespace Classes\n     {\n    \n         public class ZipHelpers\n         {\n             /// &lt;summary&gt;\n             /// Get all file names and contents\n             /// &lt;/summary&gt;\n             /// &lt;param name=&#34;zippedFile&#34;&gt;Valid zip file&lt;/param&gt;\n             /// &lt;returns&gt;&lt;/returns&gt;\n             public static Dictionary&lt;string, byte[]&gt; GetFiles(byte[] zippedFile)\n             {\n                 using (var ms = new MemoryStream(zippedFile))\n                 {\n                     using (var archive = new ZipArchive(ms, ZipArchiveMode.Read))\n                     {\n                         return archive.Entries.ToDictionary((zae) =&gt; \n                             zae.FullName, (x) =&gt; ReadStream(x.Open()));\n                     }\n                 }\n             }\n    \n             private static byte[] ReadStream(Stream stream)\n             {\n                 using (var ms = new MemoryStream())\n                 {\n                     stream.CopyTo(ms);\n                     return ms.ToArray();\n                 }\n             }\n    \n             private static readonly string[] SizeSuffixes = {&#34;bytes&#34;, &#34;KB&#34;, &#34;MB&#34;, &#34;GB&#34;, &#34;TB&#34;, &#34;PB&#34;, &#34;EB&#34;, &#34;ZB&#34;, &#34;YB&#34;};\n    \n             public static string SizeSuffix(Int64 value, int decimalPlaces = 1)\n             {\n    \n                 if (value &lt; 0)\n                 {\n                     return &#34;-&#34; + SizeSuffix(-value);\n                 }\n    \n                 int size = 0;\n                 var dValue = (decimal)value;\n                 while (Math.Round(dValue, decimalPlaces) &gt;= 1000)\n                 {\n                     dValue /= 1024M;\n                     size += 1;\n                 }\n    \n                 return string.Format(&#34;{0:n&#34; + decimalPlaces + &#34;} {1}&#34;, dValue, SizeSuffixes[size]);\n             }\n         }\n     }\n }\n</code></pre>\n<br /><br /><p><strong>Implementation</strong></p>\n<pre><code> var containers = new List&lt;ResultContainer&gt;();\n var newItem = false;\n    \n /*\n  * Change to your zip file name and path\n  */\n var zipFileName = &#34;SampleZip.zip&#34;;\n    \n if (!File.Exists(zipFileName))\n {\n     return;\n }\n    \n    \n var dictionary = ZipHelpers.GetFiles(File.ReadAllBytes(zipFileName));\n    \n var currentContainer = new ResultContainer();\n    \n foreach (KeyValuePair&lt;string, byte[]&gt; keyValuePair in dictionary)\n {\n     var folderName = Path.GetDirectoryName(keyValuePair.Key);\n    \n     if (string.IsNullOrWhiteSpace(folderName))\n     {\n         folderName = &#34;(root)&#34;;\n     }\n    \n     currentContainer = containers.FirstOrDefault((item) =&gt; item.FolderName == folderName);\n     if (currentContainer == null)\n     {\n         currentContainer = new ResultContainer {FolderName = folderName};\n         newItem = true;\n     }\n     else\n     {\n         newItem = false;\n     }\n    \n     currentContainer.List.Add(new FileContainer()\n     {\n         Name = Path.GetFileName(keyValuePair.Key),\n         Size = keyValuePair.Value.Length\n     });\n     if (newItem)\n     {\n         containers.Add(currentContainer);\n     }\n    \n }\n    \n    \n foreach (var resultContainer in containers)\n {\n     Console.WriteLine($&#34;Folder: {resultContainer.FolderName}&#34;);\n    \n     foreach (var fileContainer in resultContainer.List)\n     {\n         Console.WriteLine($&#34;\\t{fileContainer.Name} {ZipHelpers.SizeSuffix(fileContainer.Size)}&#34;);\n     }\n    \n }\n</code></pre>\n<br /><br /><p>Which provides the following in this case in the IDE output window. Dependent on your user interface you can display results in a control or simply inspect the results in code.</p>\n<pre><code> Folder: (root)\n     App.config 183.0 bytes\n     Form1.Designer.vb 5.1 KB\n     Form1.resx 5.6 KB\n     Form1.vb 5.4 KB\n     packages.config 148.0 bytes\n     ReadFileProgress.vbproj 6.5 KB\n     readme.md 3.7 KB\n     textfile1 - Copy.txt 76.8 KB\n     textfile1.txt 7.1 KB\n     VerifyForm.Designer.vb 3.9 KB\n     VerifyForm.resx 5.6 KB\n     VerifyForm.vb 839.0 bytes\n Folder: bin\\Debug\n     DelegateSimple.exe 35.5 KB\n     DelegateSimple.exe.config 183.0 bytes\n     DelegateSimple.pdb 83.5 KB\n     DelegateSimple.xml 3.4 KB\n     Microsoft.WindowsAPICodePack.dll 102.5 KB\n     Microsoft.WindowsAPICodePack.xml 149.4 KB\n     textfile1.txt 7.1 KB\n Folder: Classes\n     Delegates.vb 392.0 bytes\n     FileOperations.vb 6.0 KB\n     Person.vb 640.0 bytes\n     ProgressArgs.vb 910.0 bytes\n     Verify.vb 430.0 bytes\n Folder: Modules\n     DialogHelpers.vb 1.7 KB\n Folder: My Project\n     Application.Designer.vb 1.4 KB\n     Application.myapp 499.0 bytes\n     AssemblyInfo.vb 1.1 KB\n     Resources.Designer.vb 3.8 KB\n     Resources.resx 6.4 KB\n     Settings.Designer.vb 2.8 KB\n     Settings.settings 272.0 bytes\n Folder: obj\\Debug\n     DelegateSimple.exe 35.5 KB\n     DelegateSimple.Form1.resources 180.0 bytes\n     DelegateSimple.pdb 83.5 KB\n     DelegateSimple.Resources.resources 1.8 KB\n     DelegateSimple.VerifyForm.resources 180.0 bytes\n     DelegateSimple.xml 3.4 KB\n     DesignTimeResolveAssemblyReferencesInput.cache 7.5 KB\n     ReadFileProgress.vbproj.CopyComplete 0.0 bytes\n     ReadFileProgress.vbproj.CoreCompileInputs.cache 42.0 bytes\n     ReadFileProgress.vbproj.FileListAbsolute.txt 1.6 KB\n     ReadFileProgress.vbproj.GenerateResource.cache 1.2 KB\n     ReadFileProgress.vbprojAssemblyReference.cache 33.9 KB\n Folder: obj\\Debug\\TempPE\n     My Project.Resources.Designer.vb.dll 6.5 KB\n Folder: Resources\n     Exit_16x.png 271.0 bytes\n     ExportFile_16x.png 495.0 bytes\n     Run_16x.png 233.0 bytes\n</code></pre>\n<br /><br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-01T21:32:19.273"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-01T21:32:19.27"
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-01T21:32:13.62",
            "node": {
                "id": 182494,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"83130\" href=\"/answers/users/83130/rodatwork.html\">@RodAtWork</a> </p>\n<p><strong>Idea 1</strong><br />My last team used EDMX but was unstable after 30 plus tables so we moved to code first by creating a new class project then tying the business layer to the new class project rather trying to force things. </p>\n<p><strong>Idea 2</strong><br />Clone the repository to a completely new folder and inspect what&#39;s in the Visual Studio solution, depending on the state of source code perhaps you can work from there.</p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-01T20:44:30.143"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-01T20:44:23.18",
            "node": {
                "id": 182412,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4858658\" href=\"/answers/users/4858658/jencarloslopezreyes-3297.html\">@jenCarlosLopezReyes-3297</a> ,</p>\n<p>I would think a ListView would be a better option as shown here which even has cancellation option. To try this out see OtherExamplesForm.vb in my <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/RecurseFolders\">GitHub repository</a>.</p>\n<p>Note the first column is wide because on my computer there are many folders that are deeply nested. Also if needed will not crash if an access denied is thrown.</p>\n<p><img src=\"/answers/storage/attachments/44221-traverse1.png\" alt=\"44221-traverse1.png\" /></p>\n<p><strong>Full source</strong></p>\n<pre><code> Imports System.IO\n Imports System.Threading\n Imports RecurseFolders.Extensions\n    \n Public Class OtherExamplesForm\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Provides an opportunity to cancel traversal of folders\n     &#39;&#39;&#39; &lt;/summary&gt;\n     Private _cts As New CancellationTokenSource()\n     Private _exceptionList As List(Of String)\n    \n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Traverse folders searching for any .dll files\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Async Sub DeniedAccessCoveredButton_Click(sender As Object, e As EventArgs) Handles DeniedAccessCoveredButton.Click\n    \n         If _cts.IsCancellationRequested = True Then\n             _cts.Dispose()\n             _cts = New CancellationTokenSource()\n         End If\n    \n         _exceptionList = New List(Of String)\n         ExceptionsListBox.DataSource = Nothing\n    \n         Dim stack As New Stack(Of String)\n    \n         stack.Push(Environment.GetFolderPath(Environment.SpecialFolder.Desktop))\n    \n         Try\n    \n             Await Task.Run(Async Function()\n    \n                                Do While (stack.Count &gt; 0)\n                                    Dim directory As String = stack.Pop\n                                    Dim lvItem As New ListViewItem(directory)\n                                    ListView1.InvokeIfRequired(Sub(lv) lv.Items.Add(lvItem))\n    \n                                    Await Task.Delay(1)\n    \n                                    If _cts.IsCancellationRequested Then\n                                        _cts.Token.ThrowIfCancellationRequested()\n                                    End If\n    \n                                    Try\n    \n                                        Dim files = IO.Directory.GetFiles(directory, &#34;*.*&#34;)\n    \n                                        If files.Length &gt; 0 Then\n    \n                                            For Each file As String In files\n                                                Dim item = New ListViewItem(New String() {&#34;&#34;, Path.GetFileName(file)})\n                                                ListView1.InvokeIfRequired(Sub(lv) lv.Items.Add(item))\n                                            Next\n    \n                                        End If\n    \n                                        Dim strDirectoryName As String\n                                        For Each strDirectoryName In IO.Directory.GetDirectories(directory)\n                                            stack.Push(strDirectoryName)\n    \n                                        Next\n    \n                                    Catch ex As UnauthorizedAccessException\n                                        _exceptionList.Add(ex.Message)\n                                    End Try\n                                Loop\n    \n                            End Function)\n    \n             ExceptionsListBox.DataSource = _exceptionList\n    \n             ListView1.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize)\n             ListView1.FocusedItem = ListView1.Items(0)\n             ListView1.Items(0).Selected = True\n             ActiveControl = ListView1\n    \n         Catch ex As OperationCanceledException\n             MessageBox.Show($&#34;Cancelled&#34;)\n         End Try\n    \n     End Sub\n    \n     Private Sub CancelButton_Click(sender As Object, e As EventArgs) Handles CancelButton.Click\n         _cts.Cancel()\n     End Sub\n End Class\n</code></pre>\n<br /><br /><br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-01T18:26:15.31"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-01T18:26:08.213",
            "node": {
                "id": 182211,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"1661672\" href=\"/answers/users/1661672/ganichn.html\">@GaniCHN</a> </p>\n<p>Would the following mockup help out? If not tell me why.</p>\n<p>StartMethod is the starting point.</p>\n<pre><code> using System;\n using System.Data;\n using System.Linq;\n    \n namespace YourNamespaceGoesHere.Classes\n {\n     public class Operations\n     {\n         public static void StartMethod()\n         {\n             var dataTable = new DataTable();\n    \n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Id&#34;, DataType = typeof(int),\n                 AutoIncrement = true, AutoIncrementSeed = 1});\n    \n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;FirstName&#34;, DataType = typeof(string)});\n             dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;LastName&#34;, DataType = typeof(string)});\n    \n             dataTable.Rows.Add(null, &#34;Karen&#34;, &#34;Payne&#34;);\n             dataTable.Rows.Add(null, &#34;Bob&#34;, &#34;Adams&#34;);\n             dataTable.Rows.Add(null, &#34;mary&#34;, &#34;Jones&#34;);\n    \n             ModifyTable(dataTable);\n    \n             ModifyRow(dataTable.Rows.Cast&lt;DataRow&gt;().FirstOrDefault());\n    \n             Console.WriteLine();\n    \n         }\n         /// &lt;summary&gt;\n         /// Mockup for changing a field value for last name\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;dataRow&#34;&gt;Populated DataRow&lt;/param&gt;\n         public static void ModifyRow(DataRow dataRow)\n         {\n             dataRow.SetField(&#34;LastName&#34;, dataRow.Field&lt;string&gt;(&#34;LastName&#34;) + &#34; Changed&#34;);\n         }\n         //\n            \n         /// &lt;summary&gt;\n         /// Modify all first names\n         /// &lt;/summary&gt;\n         /// &lt;param name=&#34;dataTable&#34;&gt;Populated DataTable&lt;/param&gt;\n         public static void ModifyTable(DataTable dataTable)\n         {\n             for (int index = 0; index &lt; dataTable.Rows.Count; index++)\n             {\n                 dataTable.Rows[index]\n                     .SetField(&#34;FirstName&#34;, \n                         dataTable.Rows[index].Field&lt;string&gt;(&#34;FirstName&#34;)\n                             .ToUpper());\n             }\n         }\n     }\n }\n</code></pre>\n<p><strong>Here is a mockup for adding a new record where values are hard coded</strong>.</p>\n<pre><code> public class Operations\n {\n  public static void StartMethod()\n  {\n  var dataTable = new DataTable();\n    \n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Id&#34;, DataType = typeof(int),\n  AutoIncrement = true, AutoIncrementSeed = 1});\n    \n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;FirstName&#34;, DataType = typeof(string)});\n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;LastName&#34;, DataType = typeof(string)});\n  dataTable.Columns.Add(new DataColumn() {ColumnName = &#34;Salary&#34;, DataType = typeof(decimal)});\n    \n  dataTable.Rows.Add(null, &#34;Karen&#34;, &#34;Payne&#34;, 123.4);\n  dataTable.Rows.Add(null, &#34;Bob&#34;, &#34;Adams&#34;, 456.0);\n  dataTable.Rows.Add(null, &#34;mary&#34;, &#34;Jones&#34;, 7779.0);\n  AddRecord(dataTable);\n  }\n  public static void AddRecord(DataTable dataTable)\n  {\n  var dr = dataTable.NewRow();\n  dataTable.Rows.Add(dr);\n    \n  dr.SetField(&#34;FirstName&#34;,&#34;Mike&#34;);\n  dr.SetField(&#34;LastName&#34;,&#34;Lebow&#34;);\n  dr.SetField(&#34;Salary&#34;,45677);\n  Console.WriteLine();\n  }\n }\n</code></pre>\n<p><img src=\"/answers/storage/attachments/44317-table.png\" alt=\"44317-table.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-12-01T13:23:22.34"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-01T13:23:13.523",
            "node": {
                "id": 181891,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4846064\" href=\"/answers/users/4846064/garysimpson-0619.html\">@GarySimpson-0619</a> </p>\n<p>Even though you have a solution you might also consider using a custom TextBox. There are two properties shown below to convert .Text to title case. The OverrodeUpperCased needs to be set if you have something like KAREN PAYNE while not for karen payne.</p>\n<p><strong>Source code</strong></p>\n<pre><code> Imports System.ComponentModel\n Imports System.Globalization\n    \n Namespace Controls\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; * Suppress beep on ENTER key pressed\n     &#39;&#39;&#39; * Provides ability to title case text\n     &#39;&#39;&#39; &lt;/summary&gt;\n     Public Class NoBeepTitleCaseTextBox\n         Inherits TextBox\n    \n         Public Delegate Sub TriggerDelegate()\n         &#39;&#39;&#39; &lt;summary&gt;\n         &#39;&#39;&#39; Subscribe to be notified when ENTER was pressed.\n         &#39;&#39;&#39; &lt;/summary&gt;\n         Public Event TriggerEvent As TriggerDelegate\n         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)\n             If e.KeyCode = Keys.Enter Then\n    \n                 e.Handled = True\n                 e.SuppressKeyPress = True\n    \n                 If ToTitleCase Then\n                     HandleCasing()\n                 End If\n    \n    \n                 TriggerEventEvent?.Invoke()\n    \n                 Return\n    \n             End If\n    \n             MyBase.OnKeyDown(e)\n         End Sub\n         &#39;&#39;&#39; &lt;summary&gt;\n         &#39;&#39;&#39; Use to transform .Text to title case.\n         &#39;&#39;&#39; &lt;/summary&gt;\n         Private Sub HandleCasing()\n    \n             If useTitleCase Then\n                 Dim textInfo As TextInfo = (New CultureInfo(&#34;en-US&#34;, False)).TextInfo\n    \n                 If uppercaseOption Then\n                     Text = Text.ToLower()\n                 End If\n    \n                 Text = textInfo.ToTitleCase(Text)\n                 SelectionStart = Text.Length\n                 SelectionLength = 0\n             End If\n    \n         End Sub\n    \n         Private useTitleCase As Boolean\n         Private uppercaseOption As Boolean\n         &lt;Browsable(True)&gt;\n         &lt;Category(&#34;Extended Properties&#34;)&gt;\n         &lt;Description(&#34;Set text to title case&#34;)&gt;\n         &lt;DisplayName(&#34;ToTitleCase&#34;)&gt;\n         Public Property ToTitleCase() As Boolean\n             Get\n                 Return useTitleCase\n             End Get\n             Set\n                 useTitleCase = Value\n             End Set\n         End Property\n         &lt;Browsable(True)&gt;\n         &lt;Category(&#34;Extended Properties&#34;)&gt;\n         &lt;Description(&#34;Override casing when all text may be uppercased&#34;)&gt;\n         &lt;DisplayName(&#34;OverrideUpperCased&#34;)&gt;\n         Public Property OverrideUpperCased() As Boolean\n             Get\n                 Return uppercaseOption\n             End Get\n             Set\n                 uppercaseOption = Value\n             End Set\n         End Property\n         &#39;&#39;&#39; &lt;summary&gt;\n         &#39;&#39;&#39; We can not trap TAB in OnKeyDown so handle it here\n         &#39;&#39;&#39; then permit default via MyBase.ProcessCmdKey\n         &#39;&#39;&#39; &lt;/summary&gt;\n         &#39;&#39;&#39; &lt;param name=&#34;msg&#34;&gt;&lt;/param&gt;\n         &#39;&#39;&#39; &lt;param name=&#34;keyData&#34;&gt;&lt;/param&gt;\n         &#39;&#39;&#39; &lt;returns&gt;&lt;/returns&gt;\n         Protected Overrides Function ProcessCmdKey(ByRef msg As Message, ByVal keyData As Keys) As Boolean\n             If keyData = Keys.Tab Then\n                 If ToTitleCase Then\n                     HandleCasing()\n                 End If\n             End If\n    \n             Return MyBase.ProcessCmdKey(msg, keyData)\n    \n         End Function\n     End Class\n End Namespace\n</code></pre>\n<br /><br /><p><strong>Test code</strong></p>\n<pre><code> Public Class MainForm\n     Private Sub UseTitleCaseCheckBox_CheckedChanged(sender As Object, e As EventArgs) _\n         Handles UseTitleCaseCheckBox.CheckedChanged\n    \n         NameTextBox1.ToTitleCase = UseTitleCaseCheckBox.Checked\n         NameTextBox2.ToTitleCase = UseTitleCaseCheckBox.Checked\n    \n     End Sub\n    \n     Private Sub OverrideCasingCheckBox_CheckedChanged(sender As Object, e As EventArgs) _\n         Handles OverrideCasingCheckBox.CheckedChanged\n    \n         NameTextBox1.OverrideUpperCased = OverrideCasingCheckBox.Checked\n         NameTextBox2.OverrideUpperCased = OverrideCasingCheckBox.Checked\n    \n     End Sub\n End Class\n</code></pre>\n<p><img src=\"/answers/storage/attachments/44075-ep1.png\" alt=\"44075-ep1.png\" /></p>\n<br /><p><img src=\"/answers/storage/attachments/44142-ep.png\" alt=\"44142-ep.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "commented",
            "actionDate": "2020-12-01T02:53:52.357",
            "node": {
                "id": 181202,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4775719\" href=\"/answers/users/4775719/an-5534.html\">@AN-5534</a> </p>\n<p>Can you please provide the full xaml or a decent example so we can better help you?</p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-12-01T01:16:32.737",
            "node": {
                "id": 181005,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"107838\" href=\"/answers/users/107838/saifullahfarrukh-1281.html\">@Saifullah, </a></p>\n<p>The <a href=\"https://github.com/karenpayneoregon/code-samples-csharp/tree/master/NorthWindForEntityFrameworkFrontEnt6\">following repository</a> contains code that may assist with this task. Code is broken between a windows form and class project. The frontend need not be windows forms, could be web or WPF etc.</p>\n<p>What it doesn&#39;t provide</p>\n <ul>\n  <li><p> Line numbers<br /></p>\n\n  </li>\n  <li><p> Graphical representations<br /></p>\n\n  </li>\n  <li><p> Does not cover all versions of Entity Framework.<br /></p>\n\n  </li>\n  <li><p> No guarantees the presented code will be for you.</p>\n\n  </li>\n\n </ul>\n<p>What it does provide, an excellent foundation for getting started with many hidden gems if those interested take time to run the code under the debugger and examine what is available.</p>\n<p>Generics and asynchronous techniques are used.</p>\n<p>Here is an example for getting model names. A ListBox is populated with model names </p>\n<pre><code> public static async Task&lt;List&lt;string&gt;&gt; GeModelNames&lt;TContext&gt;() where TContext : DbContext\n {\n    \n     return await Task.Run(async () =&gt;\n     {\n         await Task.Delay(0);\n         ObjectContext objectContext;\n         using (TContext context = Activator.CreateInstance&lt;TContext&gt;())\n         {\n             objectContext = ((IObjectContextAdapter)context).ObjectContext;\n         }\n    \n         var container = objectContext.MetadataWorkspace.GetEntityContainer(objectContext.DefaultContainerName, DataSpace.CSpace);\n    \n         return container.EntitySets.Select(item =&gt; item.Name).OrderBy(x =&gt; x).ToList();\n    \n     });\n    \n }\n</code></pre>\n<br /><p>To get navigation properties for example, the code below does this by taking the selected text (model name) from the ListBox and converts the string to a type. Note here I used strings for namespace as the EF code is not in the same project.</p>\n<pre><code> Type type = Type.GetType($&#34;NorthWindForEntityFramework6.{ModelNamesListBox.Text}, NorthWindForEntityFramework6&#34;);\n NavigationListBox.DataSource = EntityCrawler.GetNavigationProperties(type);\n</code></pre>\n<br /><p>Which uses the following method to get the navigation properties or an empty array if there are none.</p>\n<pre><code> public static string[] GetNavigationProperties(Type entityType)\n {\n     return entityType.GetProperties()\n         .Where(p =&gt; (typeof(IEnumerable).IsAssignableFrom(p.PropertyType) &amp;&amp; p.PropertyType != typeof(string)) || p.PropertyType.Namespace == entityType.Namespace)\n         .Select(p =&gt; p.Name)\n         .ToArray();\n }\n</code></pre>\n<br /><br /><p>Then to get a twist, there is a similar method returning different details.</p>\n<pre><code> public static ReadOnlyMetadataCollection&lt;NavigationProperty&gt; GetNavigationProperties&lt;TEntity, TContext&gt;() where TContext : DbContext\n {\n     ObjectContext objectContext;\n    \n     using (TContext context = Activator.CreateInstance&lt;TContext&gt;())\n     {\n         objectContext = ((IObjectContextAdapter)context).ObjectContext;\n     }\n    \n     var container = objectContext.MetadataWorkspace.GetEntityContainer(objectContext.DefaultContainerName, DataSpace.CSpace);\n     var navigationProperties = ((EntityType)container.BaseEntitySets.First(bes =&gt; bes.ElementType.Name == typeof(TEntity).Name).ElementType).NavigationProperties;\n    \n     return navigationProperties;\n }\n</code></pre>\n<br /><br /><p>In closing, there is no one perfect solution is my guess and if there are third party libraries you can know that there is a great amount of time put into them.</p>\n<p>Hopefully you can find some use of the code in <a href=\"https://github.com/karenpayneoregon/code-samples-csharp/tree/master/NorthWindForEntityFrameworkFrontEnt6\">the repository</a>.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-30T20:23:48.77"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-30T20:23:40.343",
            "node": {
                "id": 180746,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4839322\" href=\"/answers/users/4839322/tejasgc-1360.html\">@TejasGC-1360</a> </p>\n<p>The following may be helpful. Source code is in the following <a href=\"https://github.com/karenpayneoregon/DataGridViewButtonAsync\">GitHub repository</a> and a Microsoft TechNet Wiki article <a href=\"http://Windows+DataGridView+with+inline+edit+and+remove+buttons\">Windows DataGridView with inline edit and remove buttons</a>.</p>\n<p>The code relies on the following custom column <a href=\"https://github.com/karenpayneoregon/DataGridViewButtonAsync/blob/master/DataGridViewButtonLibrary/DataGridViewDisableButtonColumn.cs\">DataGridViewDisableButtonColumn</a> in the repository mentioned above and <a href=\"https://github.com/karenpayneoregon/DataGridViewButtonAsync/blob/master/DataGridViewButtonExample/Form1.cs\">here is implementing</a> the button column.</p>\n<p>What it does not do &#34;as is&#34; is do two different types e.g. TextBox and Button.</p>\n<p><img src=\"/answers/storage/attachments/43783-d1.png\" alt=\"43783-d1.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-30T12:57:37.607"
        },
        {
            "actionType": "commented",
            "actionDate": "2020-11-30T12:57:32.357",
            "node": {
                "id": 180185,
                "title": null,
                "body": "<p>Hello,<br />In regards to code found but does not help, perhaps you can share the links?</p>\n",
                "type": "comment",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-30T12:34:47.117"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-30T12:34:40.763",
            "node": {
                "id": 180241,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4808192\" href=\"/answers/users/4808192/18656004.html\">@18656004</a> </p>\n<p>Look at Microsoft docs <a href=\"https://docs.microsoft.com/en-us/sql/ssma/oracle/emulate-records-collections-via-clr?view=sql-server-ver15\">Emulating Records and Collections via CLR UDT</a> then see the following <a href=\"https://docs.microsoft.com/en-us/sql/ssma/oracle/messages/o2ss0408?view=sql-server-ver15\">Collection or record type is not supported (Error)</a>. With that you might consider using Stored procedures to interact with the data.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-30T12:26:41.38"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-30T12:26:31.137",
            "node": {
                "id": 180118,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"83130\" href=\"/answers/users/83130/rodatwork.html\">@RodAtWork</a>,</p>\n<p>As you certainly learned, EDMX usage can be problematic while using EF code first from database will not cause the current issues. A good way to convince others is to work with <a href=\"https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools\">EF Core Power Tools</a> (if open to using EF Core).  You can reverse engineer databases by right clicking on a project and select EF Power Tools, reverse engineer. If something changes in the database e.g. add a new column you can rerun EF Power tools and it will allow you to update the model(s). On a side note, if you are modifying models e.g. adding read-only properties etc you can always use partial classes placed in a different folder than your models and keep the same namespace.</p>\n<p>In regards to Entity Framework vs Entity Framework Core, there are more/better way to do things in EF Core although for the most part existing code should port fine.</p>\n<p><strong>Example for selecting tables</strong><br /><img src=\"/answers/storage/attachments/43714-ef1.png\" alt=\"43714-ef1.png\" /></p>\n<p><strong>Some of the configuration options</strong><br /><img src=\"/answers/storage/attachments/43550-ef2.png\" alt=\"43550-ef2.png\" /></p>\n<br /><br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-30T12:04:05.993"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-30T12:03:23.123",
            "node": {
                "id": 180173,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4804944\" href=\"/answers/users/4804944/jikha-8803.html\">@Jikha-8803</a>,</p>\n<p>If you don&#39;t need precision of more than two decimal places then consider using decimal type.</p>\n<p>You can test (here with SQL-Server) the outcome as follows.</p>\n<pre><code> DECLARE @FoatValue float(18)= 299.87999988;\n WHILE @FoatValue &lt; 301.0\n     BEGIN\n         PRINT &#39;float: &#39; + cast(cast(@FoatValue as decimal(10,2)) AS varchar(10)) + &#39;   as decimal: &#39; + cast(@FoatValue AS varchar)\n         SET @FoatValue+=0.01;\n     END;\n</code></pre>\n",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-29T12:59:50.35"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-29T12:59:16.737",
            "node": {
                "id": 179146,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4800597\" href=\"/answers/users/4800597/t-nt.html\">@t-nt</a>,</p>\n<p>Note that the link provided by <a rel=\"user\" nodeId=\"4654122\" href=\"/answers/users/4654122/colexia-msft.html\">@ColeXia-MSFT</a> shows</p>\n<pre><code> &lt;PropertyGroup&gt;\n    &lt;LangVersion&gt;preview&lt;/LangVersion&gt;\n &lt;/PropertyGroup&gt;\n</code></pre>\n<br /><p>And</p>\n<pre><code> &lt;PropertyGroup&gt;\n    &lt;LangVersion&gt;9.0&lt;/LangVersion&gt;\n &lt;/PropertyGroup&gt;\n</code></pre>\n<br /><br /><p>While .NET 5 is out of preview so you can use</p>\n<pre><code> &lt;PropertyGroup&gt;\n     &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n     &lt;TargetFramework&gt;net5.0&lt;/TargetFramework&gt;\n     &lt;LangVersion&gt;9.0&lt;/LangVersion&gt;\n &lt;/PropertyGroup&gt;\n</code></pre>\n<br /><p>Regarding what can be used, it&#39;s always best not to look for new features to use in a project just to use them but instead know what is available and then down the road know what is available to use but not just to use because it&#39;s new but instead a particular feature fits best into code rather than earlier methods in C#.</p>\n<p>Then there are some features that will be preference based e.g. new expressions where the first one is C# 9 and the former before C# 9</p>\n<pre><code> List&lt;Person&gt; people = new();\n List&lt;Person&gt; people1 = new List&lt;Person&gt;();\n var people2 = new List&lt;Person&gt;();\n</code></pre>\n<br /><p>Another example, iterating a range.</p>\n<p>Tried and true for any version of C#</p>\n<pre><code> foreach (var contact in contacts)\n {\n     Console.WriteLine(contact);\n }\n</code></pre>\n<br /><p>C# 9 is actually more code as a range needs to be an array rather than a list.</p>\n<pre><code> foreach (var singleContact in contacts.ToArray()[..])\n {\n     Console.WriteLine(singleContact);\n }\n</code></pre>\n<br /><br /><p>But if we look at skipping the first element in C# 9 which is hard coded</p>\n<pre><code> foreach (var singleContact in contacts.ToArray()[1..])\n {\n     Console.WriteLine(singleContact);\n }\n</code></pre>\n<br /><p>To a dynamic version</p>\n<pre><code> var startIndexer = new Index(1);\n foreach (var singleContact in contacts.ToArray()[startIndexer..])\n {\n     Console.WriteLine(singleContact);\n }\n</code></pre>\n<br /><p>The might be worthy but is still a preference. </p>\n<p>What seems like an excellent candidate is pattern matching to use and is fine cross platform since it&#39;s not dependent on any platform. For example a modified method from Microsoft code samples that is not an extension method turned into an extension method.</p>\n<pre><code> public static class LanguageExtensions\n {\n     /// &lt;summary&gt;\n     /// use Switch expression to determine where a int value falls\n     /// &lt;/summary&gt;\n     /// &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     /// &lt;returns&gt;&lt;/returns&gt;\n     public static string Determination(this int sender) =&gt; sender switch\n     {\n         &lt;= 0 =&gt; &#34;Less than or equal to 0&#34;,\n         &gt; 0 and &lt;= 10 =&gt; &#34;More than 0 but less than or equal to 10&#34;,\n         _ =&gt; &#34;More than 10&#34;\n     };\n }\n</code></pre>\n<br /><p>Example usage</p>\n<pre><code> int[] values = new[] { -1, 10, 0, 11, 1 };\n    \n foreach (var value in values)\n {\n     Console.WriteLine($&#34;{value,4} is {value.Determination()}&#34;);\n }\n</code></pre>\n<br /><br /><p>Possible downside is when a team of developers there are some that have difficulties understanding Determination or have difficulties interpreting the method. One must decide between readability and function from conventional to new feature.</p>\n<p>Records may or may not suit a need and can see some developers making attempts to use them just to use them while the better choice is to understand records and know when they are a good candidate for a task.</p>\n<p>Hopefully this information is of use to you.</p>\n",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-28T20:08:57.483",
            "node": {
                "id": 178985,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4782421\" href=\"/answers/users/4782421/hobbyistprogrammer-7674.html\">@Hobbyistprogrammer-7674</a> </p>\n<p>Even though you have an accepted solution I&#39;d like to provide another solution.</p>\n <ul>\n  <li><p> Rather than a shared field use a non-shared field unless you want all existing rows to change.<br /></p>\n\n  </li>\n  <li><p> There is really no need to have a wrapper class simply for the BindingList, instead use the Setting class assigned to a BindingSource in the form. The class should really only have properties and INotifyPropertyChanged event and OnPropertyChanged</p>\n\n  </li>\n\n </ul>\n<p><strong>Setting class</strong><br />Read the comments</p>\n<pre><code> Imports System.ComponentModel\n Imports System.Runtime.CompilerServices\n    \n Namespace Classes\n     Public Class Setting\n         Implements INotifyPropertyChanged\n    \n         Public Sub New(Optional language As String = &#34;English&#34;)\n             languageValue = language\n         End Sub\n         &#39;&#39;&#39; &lt;summary&gt;\n         &#39;&#39;&#39; Shared modifier means all instances are affected,\n         &#39;&#39;&#39; remove Shared if that is not what you want.\n         &#39;&#39;&#39; &lt;/summary&gt;\n         Public languageValue As String = &#34;&#34;\n         Public Property Language() As String\n             Get\n                 Return languageValue\n             End Get\n             Set\n                 languageValue = Value\n                 &#39;\n                 &#39; Make sure to implement the line below\n                 &#39;\n                 OnPropertyChanged()\n             End Set\n         End Property\n    \n         Public Event PropertyChanged As PropertyChangedEventHandler _\n             Implements INotifyPropertyChanged.PropertyChanged\n    \n         Protected Overridable Sub OnPropertyChanged(\n             &lt;CallerMemberName&gt; Optional memberName As String = Nothing)\n             RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(memberName))\n    \n         End Sub\n     End Class\n End Namespace\n</code></pre>\n<br /><br /><p><strong>Form code</strong></p>\n<pre><code> Imports System.ComponentModel\n Imports BindingWithoutRefreshing.Classes\n    \n Public Class Form1\n    \n     Public SettingsBindingSource As New BindingSource\n     Public SettingsBindingList As New BindingList(Of Setting)\n    \n     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load\n         DataGridView2.AutoGenerateColumns = False\n    \n         SettingsBindingList = New BindingList(Of Setting)(New List(Of Setting))\n         SettingsBindingSource.DataSource = New BindingSource(SettingsBindingList, Nothing)\n    \n         DataGridView2.DataSource = SettingsBindingSource\n    \n         LanguagesComboBox.DataSource = New List(Of String) From {&#34;English&#34;, &#34;French&#34;, &#34;Spanish&#34;}\n    \n     End Sub\n    \n     Private Sub AddNewSettingButton_Click(sender As Object, e As EventArgs) _\n         Handles AddNewSettingButton.Click\n    \n         SettingsBindingSource.Add(New Setting(LanguagesComboBox.Text))\n         SettingsBindingSource.MoveLast()\n    \n     End Sub\n    \n     Private Sub ChangeLanguageButton_Click(sender As Object, e As EventArgs) _\n         Handles ChangeLanguageButton.Click\n    \n         If SettingsBindingSource.Current IsNot Nothing Then\n             CType(SettingsBindingSource.Current, Setting).Language = LanguagesComboBox.Text\n         End If\n    \n     End Sub\n    \n     Private Sub DataGridView2_DefaultValuesNeeded(sender As Object, e As DataGridViewRowEventArgs) _\n         Handles DataGridView2.DefaultValuesNeeded\n    \n         e.Row.Cells(0).Value = LanguagesComboBox.Text\n    \n     End Sub\n End Class\n</code></pre>\n<p><strong>Full source</strong> <a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/BindingWithoutRefreshing\">GitHub repository</a>    </p>\n<p><img src=\"/answers/storage/attachments/43405-form.png\" alt=\"43405-form.png\" /></p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-28T18:46:48.397"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-28T18:46:20.1"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-28T18:10:08"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-25T01:05:23.23"
        },
        {
            "actionType": "changed the state of",
            "actionDate": "2020-11-25T01:05:11.663",
            "node": {
                "id": 174462,
                "title": "Attempting to contact msdn-tn-2qamod@microsoft.com",
                "body": "<p>Hello,</p>\n<p>I sent a request to become a moderator here in the Q&amp;A forums. I sent them my profile lines below</p>\n<p><strong>Microsoft MVP profile page</strong><br /><a href=\"https://mvp.microsoft.com/en-us/PublicProfile/5001096?fullName=Karen%20S%20Payne\">https://mvp.microsoft.com/en-us/PublicProfile/5001096?fullName=Karen%20S%20Payne</a></p>\n<p><strong>My MSDN profile page</strong> <br /><a href=\"https://social.msdn.microsoft.com/profile/kareninstructor/\">https://social.msdn.microsoft.com/profile/kareninstructor/</a></p>\n<p><strong>My TechNet Wiki profile</strong><br /><a href=\"https://social.technet.microsoft.com/profile/kareninstructor/\">https://social.technet.microsoft.com/profile/kareninstructor/</a></p>\n<p>I then rec&#39;d a reply from MSDN-TechNet to Q&amp;A moderators &lt;msdn-tn-2qamod@microsoft.com&gt; asking for my doc&#39;s profile<br /><a href=\"https://docs.microsoft.com/en-us/users/karenpayneoregon/\">https://docs.microsoft.com/en-us/users/karenpayneoregon/</a></p>\n<p>And replied with my doc&#39;s profile but the email bounced as per the screenshot and <strong>have no clue how to get my response to them</strong>. Can you help me out?</p>\n<p><img src=\"/answers/storage/attachments/42339-bounced.png\" alt=\"42339-bounced.png\" /></p>\n<br /><br />",
                "type": "idea",
                "accepted": false
            }
        },
        {
            "actionType": "suggested",
            "actionDate": "2020-11-25T01:05:11.02",
            "node": {
                "id": 174462,
                "title": "Attempting to contact msdn-tn-2qamod@microsoft.com",
                "body": "<p>Hello,</p>\n<p>I sent a request to become a moderator here in the Q&amp;A forums. I sent them my profile lines below</p>\n<p><strong>Microsoft MVP profile page</strong><br /><a href=\"https://mvp.microsoft.com/en-us/PublicProfile/5001096?fullName=Karen%20S%20Payne\">https://mvp.microsoft.com/en-us/PublicProfile/5001096?fullName=Karen%20S%20Payne</a></p>\n<p><strong>My MSDN profile page</strong> <br /><a href=\"https://social.msdn.microsoft.com/profile/kareninstructor/\">https://social.msdn.microsoft.com/profile/kareninstructor/</a></p>\n<p><strong>My TechNet Wiki profile</strong><br /><a href=\"https://social.technet.microsoft.com/profile/kareninstructor/\">https://social.technet.microsoft.com/profile/kareninstructor/</a></p>\n<p>I then rec&#39;d a reply from MSDN-TechNet to Q&amp;A moderators &lt;msdn-tn-2qamod@microsoft.com&gt; asking for my doc&#39;s profile<br /><a href=\"https://docs.microsoft.com/en-us/users/karenpayneoregon/\">https://docs.microsoft.com/en-us/users/karenpayneoregon/</a></p>\n<p>And replied with my doc&#39;s profile but the email bounced as per the screenshot and <strong>have no clue how to get my response to them</strong>. Can you help me out?</p>\n<p><img src=\"/answers/storage/attachments/42339-bounced.png\" alt=\"42339-bounced.png\" /></p>\n<br /><br />",
                "type": "idea",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-23T18:28:00.157"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-23T18:25:15.91"
        },
        {
            "actionType": "edited",
            "actionDate": "2020-11-23T17:26:21.807",
            "node": {
                "id": 172590,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4369883\" href=\"/answers/users/4369883/hokwokpiu200257110-7756.html\">@HOKwokPiu200257110-7756</a>,</p>\n<p>A simplistic solution if the intent is to remember information between sessions and quick-n-easy way is to use a json file. Note there are other options e.g. saving to a text delimited file or xml while the following is strongly typed and a better solution.</p>\n<p>In the following GitHub repository I&#39;ve created a conceptual/working code sample meaning it demonstrates reading/writing to the json file and has comments.<br /><a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/BasicJson_1\">https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/BasicJson_1</a></p>\n<pre><code> [\n   {\n     &#34;Name&#34;: &#34;First item&#34;,\n     &#34;Value&#34;: 11.34\n   },\n   {\n     &#34;Name&#34;: &#34;Secondt item&#34;,\n     &#34;Value&#34;: 1.33\n   }\n ]\n</code></pre>\n<br /><p><strong>Class for storing data</strong></p>\n<pre><code> Imports System.ComponentModel\n Imports System.Runtime.CompilerServices\n    \n Namespace Classes\n     Public Class ApplicationStorage\n         Implements INotifyPropertyChanged\n         Private _name As String\n         Private _value As Decimal\n    \n         Public Property Name() As String\n             Get\n                 Return _name\n             End Get\n             Set\n                 _name = value\n                 OnPropertyChanged()\n             End Set\n         End Property\n    \n         Property Value() As Decimal\n             Get\n                 Return _value\n             End Get\n             Set\n                 _value = value\n                 OnPropertyChanged()\n             End Set\n         End Property\n    \n         Public Overrides Function ToString() As String\n             Return Name\n         End Function\n         Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\n         Protected Overridable Sub OnPropertyChanged(&lt;CallerMemberName&gt; Optional memberName As String = Nothing)\n             RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(memberName))\n         End Sub\n     End Class\n End Namespace\n</code></pre>\n<br /><br /><p><strong>File operations class</strong></p>\n<pre><code> Imports System.IO\n Imports Newtonsoft.Json\n    \n Namespace Classes\n     Public Class FileOperations\n         Public Shared FileName As String = &#34;appSetting.json&#34;\n         Public Shared Sub Save(storageList As List(Of ApplicationStorage))\n             Using streamWriter = File.CreateText(FileName)\n    \n                 Dim serializer = New JsonSerializer With {.Formatting = Formatting.Indented}\n                 serializer.Serialize(streamWriter, storageList)\n    \n             End Using\n    \n         End Sub\n         Public Shared Function Load() As List(Of ApplicationStorage)\n    \n             Using streamReader = New StreamReader(FileName)\n                 Dim json = streamReader.ReadToEnd()\n                 Return JsonConvert.DeserializeObject(Of List(Of ApplicationStorage))(json)\n             End Using\n    \n         End Function\n    \n     End Class\n End Namespace\n</code></pre>\n<br /><p><strong>Form code</strong></p>\n<pre><code> Imports System.ComponentModel\n Imports System.IO\n Imports BasicJson_1.Classes\n    \n Public Class Form1\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Storage container for ApplicationStorage data.\n     &#39;&#39;&#39; Using a BindingList and implementing INotifyPropertyChanged interface\n     &#39;&#39;&#39; permits real time updates to ListBox.\n     &#39;&#39;&#39; &lt;/summary&gt;\n     Private bindingList as new BindingList(Of ApplicationStorage)\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Load from file if exists\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n    \n         If File.Exists(FileOperations.FileName) Then\n    \n             Try\n                 bindingList = New BindingList(Of ApplicationStorage)(FileOperations.Load())\n             Catch ex As Exception\n                 MessageBox.Show($&#34;Failed to load json{Environment.NewLine}{ex.Message}&#34;)\n             End Try\n         End If\n    \n         ListBox1.DataSource = bindingList\n    \n     End Sub\n    \n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Add new item if name is value and a valid decimal was entered\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub AddButton_Click(sender As Object, e As EventArgs) Handles AddButton.Click\n         Dim value as Decimal = 0\n    \n         if Decimal.TryParse(ValueTextBox.Text, value) AndAlso Not string.IsNullOrWhiteSpace(NameTextBox.Text)\n             bindingList.Add(new ApplicationStorage() With{.Name = NameTextBox.Text, .Value = value})\n         End If\n    \n     End Sub\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Save items to json\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub SaveAllButton_Click(sender As Object, e As EventArgs) Handles SaveAllButton.Click\n         if bindingList.Count &gt;0\n             FileOperations.Save(bindingList.ToList())\n         End If\n     End Sub\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Get current item\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub CurrentButtonButton_Click(sender As Object, e As EventArgs) Handles CurrentButton.Click\n         if bindingList.Count &gt;0\n             if ListBox1.SelectedIndex &gt; -1\n                 Dim currentItem = bindingList.Item(ListBox1.SelectedIndex)\n                 MessageBox.Show($&#34;Name: {currentItem.Name} Value: {currentItem.Value}&#34;)\n             End If\n         End If\n    \n     End Sub\n End Class\n</code></pre>\n<br /><p><strong>Screen shot</strong><br /><img src=\"/answers/storage/attachments/41972-j1.png\" alt=\"41972-j1.png\" /></p>\n<br /><br /><br /><br /><br /><br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-23T17:24:57.563"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-23T17:24:50.367",
            "node": {
                "id": 172590,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"4369883\" href=\"/answers/users/4369883/hokwokpiu200257110-7756.html\">@HOKwokPiu200257110-7756</a>,</p>\n<p>A simplistic solution if the intent is to remember information between sessions and quick-n-easy way is to use a json file. Note there are other options e.g. saving to a text delimited file or xml while the following is strongly typed and a better solution.</p>\n<p>In the following GitHub repository I&#39;ve created a conceptual/working code sample meaning it demonstrates reading/writing to the json file and has comments.<br /><a href=\"https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/BasicJson_1\">https://github.com/karenpayneoregon/visual-basic-getting-started/tree/master/BasicJson_1</a></p>\n<pre><code> [\n   {\n     &#34;Name&#34;: &#34;First item&#34;,\n     &#34;Value&#34;: 11.34\n   },\n   {\n     &#34;Name&#34;: &#34;Secondt item&#34;,\n     &#34;Value&#34;: 1.33\n   }\n ]\n</code></pre>\n<br /><p><strong>Class for storing data</strong></p>\n<pre><code> Imports System.ComponentModel\n Imports System.Runtime.CompilerServices\n    \n Namespace Classes\n     Public Class ApplicationStorage\n         Implements INotifyPropertyChanged\n         Private _name As String\n         Private _value As Decimal\n    \n         Public Property Name() As String\n             Get\n                 Return _name\n             End Get\n             Set\n                 _name = value\n                 OnPropertyChanged()\n             End Set\n         End Property\n    \n         Property Value() As Decimal\n             Get\n                 Return _value\n             End Get\n             Set\n                 _value = value\n                 OnPropertyChanged()\n             End Set\n         End Property\n    \n         Public Overrides Function ToString() As String\n             Return Name\n         End Function\n         Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged\n         Protected Overridable Sub OnPropertyChanged(&lt;CallerMemberName&gt; Optional memberName As String = Nothing)\n             RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(memberName))\n         End Sub\n     End Class\n End Namespace\n</code></pre>\n<br /><br /><p><strong>File operations class</strong></p>\n<pre><code> Imports System.IO\n Imports Newtonsoft.Json\n    \n Namespace Classes\n     Public Class FileOperations\n         Public Shared FileName As String = &#34;appSetting.json&#34;\n         Public Shared Sub Save(storageList As List(Of ApplicationStorage))\n             Using streamWriter = File.CreateText(FileName)\n    \n                 Dim serializer = New JsonSerializer With {.Formatting = Formatting.Indented}\n                 serializer.Serialize(streamWriter, storageList)\n    \n             End Using\n    \n         End Sub\n         Public Shared Function Load() As List(Of ApplicationStorage)\n    \n             Using streamReader = New StreamReader(FileName)\n                 Dim json = streamReader.ReadToEnd()\n                 Return JsonConvert.DeserializeObject(Of List(Of ApplicationStorage))(json)\n             End Using\n    \n         End Function\n    \n     End Class\n End Namespace\n</code></pre>\n<br /><p><strong>Form code</strong></p>\n<pre><code> Imports System.ComponentModel\n Imports System.IO\n Imports BasicJson_1.Classes\n    \n Public Class Form1\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Storage container for ApplicationStorage data.\n     &#39;&#39;&#39; Using a BindingList and implementing INotifyPropertyChanged interface\n     &#39;&#39;&#39; permits real time updates to ListBox.\n     &#39;&#39;&#39; &lt;/summary&gt;\n     Private bindingList as new BindingList(Of ApplicationStorage)\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Load from file if exists\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub Form1_Shown(sender As Object, e As EventArgs) Handles Me.Shown\n    \n         If File.Exists(FileOperations.FileName) Then\n    \n             Try\n                 bindingList = New BindingList(Of ApplicationStorage)(FileOperations.Load())\n             Catch ex As Exception\n                 MessageBox.Show($&#34;Failed to load json{Environment.NewLine}{ex.Message}&#34;)\n             End Try\n         End If\n    \n         ListBox1.DataSource = bindingList\n    \n     End Sub\n    \n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Add new item if name is value and a valid decimal was entered\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub AddButton_Click(sender As Object, e As EventArgs) Handles AddButton.Click\n         Dim value as Decimal = 0\n    \n         if Decimal.TryParse(ValueTextBox.Text, value) AndAlso Not string.IsNullOrWhiteSpace(NameTextBox.Text)\n             bindingList.Add(new ApplicationStorage() With{.Name = NameTextBox.Text, .Value = value})\n         End If\n    \n     End Sub\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Save items to json\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub SaveAllButton_Click(sender As Object, e As EventArgs) Handles SaveAllButton.Click\n         if bindingList.Count &gt;0\n             FileOperations.Save(bindingList.ToList())\n         End If\n     End Sub\n     &#39;&#39;&#39; &lt;summary&gt;\n     &#39;&#39;&#39; Get current item\n     &#39;&#39;&#39; &lt;/summary&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;sender&#34;&gt;&lt;/param&gt;\n     &#39;&#39;&#39; &lt;param name=&#34;e&#34;&gt;&lt;/param&gt;\n     Private Sub CurrentButtonButton_Click(sender As Object, e As EventArgs) Handles CurrentButton.Click\n         if bindingList.Count &gt;0\n             if ListBox1.SelectedIndex &gt; -1\n                 Dim currentItem = bindingList.Item(ListBox1.SelectedIndex)\n                 MessageBox.Show($&#34;Name: {currentItem.Name} Value: {currentItem.Value}&#34;)\n             End If\n         End If\n    \n     End Sub\n End Class\n</code></pre>\n<br /><p><strong>Screen shot</strong><br /><img src=\"/answers/storage/attachments/41972-j1.png\" alt=\"41972-j1.png\" /></p>\n<br /><br /><br /><br /><br /><br />",
                "type": "answer",
                "accepted": true
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-23T16:24:05.62"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-23T16:23:52.5"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-23T16:23:37.24"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-10T11:20:51.213"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-11-02T18:32:21.057",
            "node": {
                "id": 148666,
                "title": null,
                "body": "<p>Hello,</p>\n<p>What we do is to push configuration (and other files that don&#39;t require the app to be rebuild) files via active directory to a specific group which has an application that needs a new/modified configuration file. So only the configuration file is replaced.</p>\n<p>The following is slightly off-topic</p>\n<p>Also, if you want to assert if the server is available check out <a href=\"https://github.com/karenpayneoregon/SqlServerUtilititesLibrary/blob/master/DataLibrary/Utilities.cs\">the following class</a> on GitHub where the methods can be called before working with your DbContext or perhaps if an exception is thrown. The example is shown in a windows form app but since the code is in a class the code can be used in any project.</p>\n<p>Then there is the thought of having multiple connections that can change at runtime where <a href=\"https://docs.microsoft.com/en-us/answers/questions/148183/advice-on-design-to-handle-server-connection.html\">the following GitHub repository</a> may be of assistance.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-11-02T17:28:08.653"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-10-31T14:00:58.233",
            "node": {
                "id": 146994,
                "title": null,
                "body": "<p>Hello,</p>\n <ul>\n  <li><p> The first step is to properly design your database using <a href=\"https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-ver15\">SSMS</a> and write SQL in SSMS to ensure you can write up code in Visual Studio.<br /></p>\n\n  </li>\n  <li><p> Next, create a class project which where all interaction with database should happen. This is were you do CRUD by passing in a class instance, all information to perform CRUD. <br /></p>\n\n  </li>\n  <li><p> Design the user interfaces and to access data go with bullet two to write methods for working with data.  The user interface project many contain one or more forums. You need to look at DataBinding controls to display, edit, new, delete.<br /></p>\n\n  </li>\n  <li><p> User interface other than stock out of the box you need to look at different ideas by searching the web as there more than one way to customize a user interface</p>\n<br />\n  </li>\n\n </ul>\n<p>For an idea on reading data as per above, no CRUD see the <a href=\"https://github.com/karenpayneoregon/conventional-to-efcore-3\">following repository</a> for starters and from there you can add in missing methods. Another avenue is to consider Entity Framework Core for working with data, if so this belongs in the class in bullet two. EF Core setup is easy, takes a few minutes but afterwards is easier to work with than convention data access.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "started following",
            "actionDate": "2020-10-31T14:00:51.12"
        },
        {
            "actionType": "started following",
            "actionDate": "2020-10-31T13:41:13.377"
        },
        {
            "actionType": "answered",
            "actionDate": "2020-10-30T22:03:24.143",
            "node": {
                "id": 146577,
                "title": null,
                "body": "<p>Hello <a rel=\"user\" nodeId=\"3892863\" href=\"/answers/users/3892863/bobkhankhan-0497.html\">@bobkhankhan-0497</a> ,</p>\n<p>Rather than thinking in terms of &#34;a class&#34; first model what is needed in a database, seed the database with realistic data followed by determining if you can get back data as you would expect. All of this should be done in a database editor e.g. SSMS (SQL-Server Management Studio) for SQL-Server, MS-Access use the tools in the database, Oracle SQL Developer or Toad etc.</p>\n<p>Next consider how you will interact with the data, this might be a managed data provider, Entity Framework 6 or Entity Framework Core.</p>\n<p>Decide on a project type (there are several types to choice from in Visual Studio dependent on the version of Visual Studio). Once this is done if using Entity Framework reverse engineer the database using <a href=\"https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools\">EF Power Tools</a> (free).</p>\n<p>In regards to</p>\n <ul>\n  <li><p> Validating email address, there is no one correct way, look around the web, try a few out. Note that with classes generated by Entity Framework one option is to use data annotations to validate an email but it&#39;s not perfect.<br /></p>\n\n  </li>\n  <li><p> Changing password/resetting passwords, best to look around as there is no one all encompassing method. If this is a commercial app a consideration may be to use Azure on prem (cost less then on the web but takes time to properly setup)</p>\n\n  </li>\n\n </ul>\n<p>Don&#39;t get hung up on things such as working with contact details interacting in the user interface, instead if you are new to this type of development, start out small in a test project and work through the basics, moving to where you need to be with the user interface.</p>\n<p>My assumption is you are new to this type of development so don&#39;t rush, take you time and handle small chunks of coding at a time. Look at setting up a DevOps account and create a project, write out your requirements in stories, task and test along with using the repository to store code. </p>\n<p>In closing, if you get stuck with something either ask here, <a href=\"https://social.msdn.microsoft.com/Forums/en-US/home?forum=csharpgeneral\">MSDN C# forum</a> or <a href=\"https://stackoverflow.com/questions/tagged/c%23\">StackOverflow</a> and be clear to what you are having problems with.</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "answered",
            "actionDate": "2020-10-10T22:20:18.423",
            "node": {
                "id": 122400,
                "title": null,
                "body": "<p>In the future you can script your database and set <a href=\"https://docs.microsoft.com/en-us/sql/relational-databases/databases/view-or-change-the-compatibility-level-of-a-database?view=sql-server-ver15\">compatibility level</a> to match which edition of SQL-Server being used using SSMS (SQL-Server Management Studio).</p>\n<br />",
                "type": "answer",
                "accepted": false
            }
        },
        {
            "actionType": "joined",
            "actionDate": "2019-10-31T14:54:55.393"
        },
        {
            "actionType": "joined",
            "actionDate": "2019-10-28T13:16:44.793"
        }
    ],
    "Assessments": {
        "sessions": [],
        "sessionProviderData": []
    }
}